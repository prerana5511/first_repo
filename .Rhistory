#here package
library(here)
here()
here <- here()
# I try to keep object names informative and short
# we often use "ppt" for precipitation
ppt <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
#Setup (I try to load all packages at the top)
library(readr)
library(here)
#here package example
# library(here)
here <- here() #create a filepath object named "here" to use later
# I try to keep object names informative and short
# we often use "ppt" for precipitation
ppt <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
View(ppt)
glimpse(ppt)
#Setup (I try to load all packages at the top)
library(tidyverse) #this is a set of several packages including 'readr'
#you can specify the package that the function belongs to (see below)
#this is a good idea to reminder yourself when you're first learning
ppt <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
glimpse(ppt)
#finding working directory
getwd()
#filter
library(lubridate)
is.interval(ppt$datetime_interval_EST
)
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
here <- here()
ppt <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
glimpse(ppt)
is.interval(ppt$datetime_interval_EST)
getwd()
View(ppt)
ppt1 <- read_csv(paste0(here, "/data/W9_Streamflow_Precipitation"))
ppt <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt1 <- read_csv(paste0(here, "/data/W9_Streamflow_Precipitation"))
ppt1 <- read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
ppt1 <- read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
ppt1 <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
View(ppt1)
ppt <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
library(lubridate)
day <- today()
str(day)
day <- today(tz=IST)
day <- today(tz= "IST")
day <- today(tz= "India Standard Time")
day <- today(tz= "India/Kolkata")
day <- today(tz= "India/Delhi")
head(OlsonNames())
OlsonNames()
day <- today(tz= "Asia/Kolkata")
str(day)
datetime <- now(tz= "Asia/Kolkata")
str(datetime)
dateFormat1 <- "20220922"
ymd(dateFormat1)
ppt_new <- ppt %>%
select(datetime_interval_EST) %>%
rename(interval = datetime_interval_EST)
glimpse(ppt_new)
View(ppt_new)
View(ppt_new)
ppt <- ppt %>%
select(datetime_interval_EST) %>%
rename(interval = datetime_interval_EST)
glimpse(ppt)
View(ppt)
View(ppt)
ppt <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
is.interval(ppt$datetime_interval_EST)
is.interval(ppt$datetime_interval_EST)
is.interval(ppt$datetime_interval_EST)
as.interval(ppt$datetime_interval_EST)
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
here <- here()
ppt <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
sapply(data, class)
sapply(ppt, class)
is.interval(ppt$datetime_interval_EST) #this column is not classed as an 'interval'
ppt <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
is.interval(ppt$datetime_interval_EST)
here <- here()
ppt <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt1 <- read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt1 <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
glimpse(ppt)
glimpse(ppt1)
is.interval(ppt$datetime_interval_EST)
library(tidyverse)
library(here)
here <- here()
ppt <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
glimpse(ppt)
as.interval(ppt$datetime_interval_EST)
is.interval(ppt$datetime_interval_EST)
ppt$datetime_interval_EST <- as.numeric(ppt$datetime_interval_EST)
sappy(ppt, class)
sapply(ppt, class)
is.interval(ppt$datetime_interval_EST)
as.interval(ppt$datetime_interval_EST)
View(ppt)
library(tidyverse)
library(here)
here <- here()
ppt <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
sapply(ppt, class)
is.interval(ppt$datetime_interval_EST)
ppt$datetime_interval_EST <- as.interval(as.numeric(ppt$datetime_interval_EST))
as.interval(3600, ymd("2009-01-01"))
library(tidyverse)
library(here)
here <- here()
ppt <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
glimpse(ppt)
is.interval(ppt$datetime_interval_EST)
#Setup (I try to load all packages at the top)
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
library(lubridate)
here <- here() #create a filepath object named "here" to use later
intervals <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
events <- read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
#Setup (I try to load all packages at the top)
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
library(lubridate) #lubridate needs to be loaded separately
here <- here() #create a filepath object named "here" to use later
library(lubridate) #lubridate needs to be loaded separately
here
#0.0 Setup (I try to load all packages at the top)
library(tidyverse) #this is a set of several packages including 'readr'
#0.0 Setup
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
here <- here() #create a filepath object named "here" to use later
library(lubridate) #lubridate needs to be loaded separately
#1.0 Load data ----
# adding 4 dashes "----" creates a collapsible code chunk
# specify packages using "::" in bewteen package name and function
events <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
#use dplyr::glimpse to browse data
glimpse(events)
class(events$datetime_interval_EST)
is.interval(events$datetime_interval_EST) #this column is not classed as an 'interval'
is.interval(events$datetime_interval_EST) #this column is not classed as an 'interval'
#Check the format of the interval
base::class(events$datetime_interval_EST)
#Check the format of the interval column
base::class(events$datetime_interval_EST)
lubridate::is.interval(events$datetime_interval_EST)
#identifying class
sapply(events, class)
#converting to numeric class
events$datetime_interval_EST <- as.numeric(events$datetime_interval_EST)
class(events)
class(events$datetime_interval_EST)
#converting numeric to interval by the instruction given in 'Help'
events2 <- events %>%
mutate(datetime_interval_EST2 <- as.interval(3600, ymd("2018-05-31")))
View(events2)
#1.0 Load and Clean Data ----
# adding 4 dashes "----" creates a collapsible code chunk
# specify packages using "::" in bewteen package name and function
events <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
#converting numeric to interval by the instruction given in 'Help'
events2 <- events %>%
mutate(datetime_interval_EST2 <- lubridate::as.interval(3600, ymd("2018-05-31")))
View(events2)
class(events2$`datetime_interval_EST2 <- ...`
)
class(events2$datetime_interval_EST2)
#converting numeric to interval by the instruction given in 'Help'
events2 <- events %>%
mutate(datetime_interval_EST2 = lubridate::as.interval(3600, ymd("2018-05-31")))
class(events2$datetime_interval_EST2)
#converting numeric to interval by the instruction given in 'Help'
events2 <- events %>%
mutate(datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT))
class(events2$datetime_interval_EST2)
tz(events2$datetime_interval_EST2)
tz(events2$datetime_start_GMT)
#converting numeric to interval by the instruction given in 'Help'
events2 <- events %>%
mutate(.after = datetime_end_GMT, #indicates where the new column is placed
datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT
))
class(events2$datetime_interval_EST2)
tz(events2$datetime_interval_EST2)
tz(events2$datetime_start_GMT)
#converting numeric to interval by the instruction given in 'Help'
events2 <- events %>%
mutate(.after = datetime_end_GMT, #indicates where the new column is placed
datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT,
tz = "America/New York"
))
#converting numeric to interval by the instruction given in 'Help'
events2 <- events %>%
mutate(.after = datetime_end_GMT, #indicates where the new column is placed
datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT,
tz = "EST"
))
tz(events2$datetime_start_GMT)
tz(events2$datetime_interval_EST2)
class(events2$datetime_interval_EST2)
# Define the interval using start and end times
events2 <- events %>%
mutate(.after = datetime_end_GMT, #indicates where the new column is placed
datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT,
tz = "EST"))
class(events2$datetime_interval_EST2)
tz(events2$datetime_interval_EST2)
int_start(events2$datetime_interval_EST2)
t <- int_start(events2$datetime_interval_EST2[1])
class(t)
tz(t)
#To ensure the interval is in EST, we can pull out the start
start <- int_start(events2$datetime_interval_EST2[1])
class(start)
tz(start)
OlsonNames() #valid timezone names
#Now you should have an set of intervals to use for filtering
intervals <- events2$datetime_interval_EST2
view(events2)
#0.0 Setup
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
here <- here() #create a filepath object named "here" to use later
library(lubridate) #lubridate needs to be loaded separately
#1.0 Load and Clean Data ----
# adding 4 dashes "----" creates a collapsible code chunk
# specify packages using "::" in bewteen package name and function
events <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
#use dplyr::glimpse to browse data
glimpse(events)
glimpse(ppt)
#identifying class
sapply(events, class)
#Check the format of the interval column
#"base" refers to the base R packages that come with R
base::class(events$datetime_interval_EST) #loaded as a character string
lubridate::is.interval(events$datetime_interval_EST)
# Define the interval using start and end times
events2 <- events %>%
mutate(.after = datetime_end_GMT, #indicates where the new column is placed
datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT,
tz = "EST"))
class(events2$datetime_interval_EST2)
tz(events2$datetime_interval_EST2) #timezone of interval gives an error
tz(events2$datetime_start_GMT) #timezone of start is UTC/GMT
view(events2) #check the new intervals match the character intervals
#To ensure the interval is in EST, we can pull out the start
start <- int_start(events2$datetime_interval_EST2[1])
class(start)
tz(start)
#Now you should have an set of intervals to use for filtering
intervals <- events2$datetime_interval_EST2
intervals
#Now you should have an set of intervals to use for filtering
intervals <- distinct(events2$datetime_interval_EST2)
#Now you should have an set of intervals to use for filtering
intervals <- unique(events2$datetime_interval_EST2)
intervals
