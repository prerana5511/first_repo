P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)%>%
group_by(Event_Number)
View(ppt_change)
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)%>%
group_by(Event_Number)
dplyr::summarise(P_change_sum = sum(P_change))
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)%>%
group_by(Event_Number) %>%
dplyr::summarise(P_change_sum = sum(P_change))
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)%>%
group_by(Event_Number) %>%
dplyr::summarise(P_change_sum = sum(P_change)),
P_change_mean = mean(P_change, na.rm = TRUE))%>%
left_join(events_summary, ., by = "Event_Number")
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)%>%
group_by(Event_Number) %>%
dplyr::summarise(P_change_sum = sum(P_change)),
P_change_mean = mean(P_change, na.rm = TRUE))
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)%>%
group_by(Event_Number) %>%
summarise(P_change_sum = sum(P_change),
P_change_mean = mean(P_change, na.rm = TRUE))
View(events_summary)
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
here <- here() #create a filepath object named "here" to use later
library(lubridate) #lubridate needs to be loaded separately
#1.0 Load and Clean Data ----
# adding 4 dashes "----" creates a collapsible code chunk
# specify packages using "::" in bewteen package name and function
events <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
#use dplyr::glimpse to browse data
glimpse(events)
glimpse(ppt)
#identifying class
sapply(events, class)
sapply(ppt, class)
#Check the format of the interval column
#"base" refers to the base R packages that come with R
base::class(events$datetime_interval_EST) #loaded as a character string
lubridate::is.interval(events$datetime_interval_EST)
#this column is not classed as an 'interval'
#It must be classed as an interval before lubridate can use it to filter.
##1.1 Define the interval using start and end times----
events2 <- events %>%
mutate(.after = datetime_end_GMT, #indicates where the new column is placed
datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT,
tz = "EST"))
class(events2$datetime_interval_EST2)
tz(events2$datetime_interval_EST2) #timezone of interval gives an error
tz(events2$datetime_start_GMT) #timezone of start is UTC/GMT
view(events2) #check the new intervals match the character intervals
#To check the interval is in EST, we can pull out the start
start <- int_start(events2$datetime_interval_EST2[1])
class(start)
tz(start)
#Now you should have an set of intervals to use for filtering
intervals <- events2 %>%
distinct(datetime_interval_EST2, .keep_all = TRUE) %>%
select(Event_Number, datetime_interval_EST2) %>%
mutate(event_dur_sec = dseconds(datetime_interval_EST2),
event_dur_s = as.numeric(intervals$event_dur_sec))
##1.2 Assign event numbers/filter ppt time series based on event intervals ----
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
filter(minute(datetime_EST2) == 0) %>% #remove subhourly timestamps
select(-W9_Streamflow_mm_hr) %>%
arrange(datetime_EST2) #Order from earliest to latest timestamp
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(Event_Number = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the hourly time series record is filtered with event numbers
#2.0 ---- Create summary statistics for each event
#use tidy R piping and dplyr::group_by and summarize functions
options(dplyr.summarise.inform = TRUE) #I like to see the feedback
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
View(events)
View(events_summary)
View(events_summary2)
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)%>%
group_by(Event_Number) %>%
summarise(P_change_sum = sum(P_change),
P_change_mean = mean(P_change, na.rm = TRUE),
P_rate = )%>%
left_join(events_summary, ., by = "Event_Number")
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)%>%
group_by(Event_Number)
View(ppt_change)
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)%>%
group_by(Event_Number) %>%
summarise(P_change_sum = sum(P_change)
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)%>%
group_by(Event_Number) %>%
summarise(P_change_sum = sum(P_change)
View(ppt_events)
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
View(ppt_events)
View(events_summary)
View(intervals)
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous)
View(ppt_change)
View(intervals)
View(events2)
View(interval)
View(interval1)
View(intervals)
ppt_change <-  ppt_events %>%
distinct(events2$datetime_interval_EST2, .keep_all = TRUE) %>%
mutate( P_previous= lag(W9_Precipitation_mm),
View(ppt_change)
View(ppt_change)
View(ppt_change)
ppt_change <-  ppt_events %>%
distinct(events2$datetime_interval_EST2, .keep_all = TRUE)
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
distinct(events2$datetime_interval_EST2, .keep_all = TRUE)
View(events_summary)
#0.0 Setup ----
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
here <- here() #create a filepath object named "here" to use later
library(lubridate) #lubridate needs to be loaded separately
#1.0 Load and Clean Data ----
# adding 4 dashes "----" creates a collapsible code chunk
# specify packages using "::" in bewteen package name and function
events <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
#use dplyr::glimpse to browse data
glimpse(events)
glimpse(ppt)
#identifying class
sapply(events, class)
sapply(ppt, class)
#Check the format of the interval column
#"base" refers to the base R packages that come with R
base::class(events$datetime_interval_EST) #loaded as a character string
lubridate::is.interval(events$datetime_interval_EST)
#this column is not classed as an 'interval'
#It must be classed as an interval before lubridate can use it to filter.
##1.1 Define the interval using start and end times----
events2 <- events %>%
mutate(.after = datetime_end_GMT, #indicates where the new column is placed
datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT,
tz = "EST"))
class(events2$datetime_interval_EST2)
tz(events2$datetime_interval_EST2) #timezone of interval gives an error
tz(events2$datetime_start_GMT) #timezone of start is UTC/GMT
view(events2) #check the new intervals match the character intervals
#To check the interval is in EST, we can pull out the start
start <- int_start(events2$datetime_interval_EST2[1])
class(start)
tz(start)
#Now you should have an set of intervals to use for filtering
intervals <- events2 %>%
distinct(datetime_interval_EST2, .keep_all = TRUE) %>%
select(Event_Number, datetime_interval_EST2) %>%
mutate(event_dur_sec = dseconds(datetime_interval_EST2),
event_dur_s = as.numeric(intervals$event_dur_sec))
##1.2 Assign event numbers/filter ppt time series based on event intervals ----
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
filter(minute(datetime_EST2) == 0) %>% #remove subhourly timestamps
select(-W9_Streamflow_mm_hr) %>%
arrange(datetime_EST2) #Order from earliest to latest timestamp
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(Event_Number = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the hourly time series record is filtered with event numbers
#2.0 ---- Create summary statistics for each event
#use tidy R piping and dplyr::group_by and summarize functions
options(dplyr.summarise.inform = TRUE) #I like to see the feedback
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous,
P_rate = P_change/P_previous)
View(ppt_change)
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous,
P_rate = ((P_change/P_previous)*100)%>%
group_by(Event_Number)
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous,
P_rate = ((P_change/P_previous)*100, na.rm = TRUE)
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
View(ppt_events)
ppt_change <-  ppt_events %>%
group_by(Event_Number) %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous,
P_rate = ((P_change/P_previous)*100)
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
group_by(Event_Number) %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous,
P_rate = ((P_change/P_previous)*100)%>%
na.omit()
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
group_by(Event_Number) %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous,
P_rate = ((P_change/P_previous)*100))
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
group_by(Event_Number) %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm)
View(ppt_change)
View(ppt_change)
View(ppt_change)
View(ppt_change)
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
group_by(Event_Number) %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous,
P_rate = ((P_change/P_previous)*100))
ppt_change <-  ppt_events %>%
group_by(Event_Number) %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm)
View(ppt_change)
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
group_by(Event_Number) %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm)
View(ppt_change)
ry to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous,
P_rate = ((P_change/P_previous)*100))
View(ppt_change)
library(ggplot2)
p1 <- ggplot(data =  ppt_change)
p2 <- p1 + geom_line(aes(x = factor(ppt_change$datetime_EST2),
y = ppt_change$P_rate,
color = "blue",
group = 1 ))
View(p2)
View(p2)
library(ggplot2)
p1 <- ggplot(data =  ppt_change)
p2 <- p1 + geom_line(aes(x = factor(ppt_change$datetime_EST2),
y = ppt_change$P_rate,
color = "blue",
group = 1 ))
library(ggplot2)
p1 <- ggplot(data =  ppt_change)
p1 <- p1 + geom_line(aes(x = factor(ppt_change$datetime_EST2),
y = ppt_change$P_rate,
color = "blue",
group = 1 ))
p1
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous,
P_rate = ((P_change/P_previous)*100))
library(ggplot2)
p1 <- ggplot(data =  ppt_change)
p1 <- p1 + geom_line(aes(x = ppt_change$datetime_EST2,
y = ppt_change$P_rate,
color = "blue",
group = 1 ))
p1
library(ggplot2)
p1 <- ggplot(data =  ppt_change)
p2 <- p1 + geom_line(aes(x = datetime_EST2,
y = P_rate,
color = "blue",
group = 1 ))
p2
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
ppt_change <-  ppt_events %>%
mutate( P_previous= lag(W9_Precipitation_mm),
P_next = lead(W9_Precipitation_mm),
P_change = ppt_events$W9_Precipitation_mm - P_previous,
P_rate = ((P_change/P_previous)*100))%>%
summarise(P_max_rate = max(P_rate, na.rm = TRUE))
View(ppt_change)
