mutate(time =  seconds((dt - dt_max_yield_mm)*60),
time2 = time_length(time, unit = "seconds"))%>%
mutate(log_yield = log(yield_mm.x))
nested_data <- hobo_events6 %>%
group_by(site, hobo_event_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(r = map_dbl(.x = data, .f = ~cor(y=.x$log_yield, x = .x$time2,
use = "na.or.complete")),
m = map_dbl(data, ~lm(log_yield ~ time2, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(log_yield ~ time2, data = .)$coefficients[[1]]),
r2 = r^2)%>%
rename(hobo_data = data)
nested_data_plot <- nested_data %>%
mutate(
map(hobo_data, ~ ggplot(., aes(x = time2, y = log_yield)) +
geom_point() +
geom_smooth(se = TRUE,colour = 'blue')
)
) %>%
rename(plot_hobo = `map(...)`)
nested_data_plot$plot_hobo[33]
View(nested_data_plot)
View(nested_data_plot)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(dygraphs)
library(xts)
hobo_events<- readRDS(paste0(here, "/output/hobo_events.Rds"))
hobo_events2 <- hobo_events%>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm")%>%
group_by(site, dt) %>%
arrange(dt)%>%
ungroup()%>%
select(dt, site,  yield_mm, hobo_event_n)%>%
drop_na()
#normalization to remove negatives----
hobo_norm<- hobo_events2 %>%
group_by(site)%>%
mutate(yield_norm = yield_mm + abs(min(yield_mm)))%>%
select(-yield_mm)%>%
rename("yield_mm" = "yield_norm")
#Smoothing----
# sum(is.na(log(hobo_norm$yield_mm)))
# sum(is.infinite(log(hobo_norm$yield_mm)))
# hobo_norm_modified <- hobo_norm %>%
#   mutate(log_values = log(yield_mm))%>%
#   mutate(is.infinite(log_values))%>%
#   rownames_to_column()
# hobo_norm_modified[c('log_values')][sapply(hobo_norm_modified[c('log_values')], is.infinite)] <- NA
# hobo_norm_filtered <- hobo_norm_modified%>%
#   mutate(to_keep = case_when (rowname %in% c(384, 9021, 12220) ~ FALSE,  TRUE ~ TRUE))%>%
#   filter(to_keep) %>% select(-c( to_keep,rowname))
# hobo_smooth <- hobo_event2 %>%
#   group_by(site, hobo_event_n) %>%
#   mutate(model <- model = loess(yield_mm~dt, span = 0.1)$fitted)
hobo_norm_wide <- hobo_norm%>%
pivot_wider(names_from = "site", values_from = "yield_mm")
ggplot(hobo_norm_wide, aes(x= dt)) +
geom_smooth(aes(y= SFA_mm, col= paste0('SFA_mm')), se = FALSE, method = "loess", span = 0.1) +
geom_smooth(aes(y= SFB_mm, col= paste0('SFB_mm')), se = FALSE, method = "loess",span = 0.1)+
geom_smooth(aes(y= SFC_mm, col= paste0('SFC_mm')), se = FALSE, method = "loess",span = 0.1)+
geom_smooth(aes(y= SFB_mm, col= paste0('SFD_mm')), se = FALSE, method = "loess",span = 0.1)
# +scale_x_continuous( breaks = seq(2018-07-24, 2018-11-03, by = 10) )+
# theme_bw()
gg1 <- ggplot(hobo_norm_wide, aes(x= dt)) +
geom_smooth(aes(y= SFA_mm, col= paste0('SFA_mm')), se = FALSE, method = "loess", span = 0.1)
gg2 <- ggplot(hobo_norm_wide, aes(x= dt))+
geom_smooth(aes(y= SFB_mm, col= paste0('SFB_mm')), se = FALSE, method = "loess",span = 0.1)
gg3<- ggplot(hobo_norm_wide, aes(x= dt))+
geom_smooth(aes(y= SFC_mm, col= paste0('SFC_mm')), se = FALSE, method = "loess",span = 0.1)
gg4 <-ggplot(hobo_norm_wide, aes(x= dt))+
geom_smooth(aes(y= SFD_mm, col= paste0('SFD_mm')), se = FALSE, method = "loess",span = 0.1)
SFA_smooth  <-  ggplot_build(gg1)$data[[1]][,c("x","y")] %>%
mutate(Date = as_datetime(x)) %>%
rename("SFA_mm" = "y")%>%
select(-x)
SFB_smooth  <-  ggplot_build(gg2)$data[[1]][,c("x","y")] %>%
mutate(Date = as_datetime(x)) %>%
rename("SFB_mm" = "y")%>%
select(-x)
SFC_smooth  <-  ggplot_build(gg3)$data[[1]][,c("x","y")] %>%
mutate(Date = as_datetime(x)) %>%
rename("SFC_mm" = "y")%>%
select(-x)
SFD_smooth  <-  ggplot_build(gg4)$data[[1]][,c("x","y")] %>%
mutate(Date = as_datetime(x)) %>%
rename("SFD_mm" = "y")%>%
select(-x)
hobo_smooth <- bind_cols(SFA_smooth,SFB_smooth,SFC_smooth,SFD_smooth)%>%
select(Date...2, SFA_mm, SFB_mm, SFC_mm, SFD_mm)%>%
rename("dt" = "Date...2")
hobo_smooth_long <- hobo_smooth%>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm")%>%
group_by(site, dt) %>%
arrange(dt)%>%
ungroup()%>%
drop_na()
hobo_interval <- readxl::read_excel(paste0(here, "/data/hobo/hobo_events.xlsx"))
hobo_interval2 <- hobo_interval %>%
mutate(dt = lubridate::interval(start = start_time_EST,
end = end_time_EST,
tz = "EST"))
class(hobo_interval2$dt)
tz(hobo_interval2$dt) #timezone of interval gives an error
tz(hobo_interval2$start_time_EST) #timezone of start is UTC/GMT
#To check the interval is in EST, we can pull out the start
start <- int_start(hobo_interval2$dt[1])
class(start)
tz(start)
hobo_join <- slice(hobo_norm, 0)
for (i in 1:length(hobo_interval2$hobo_event_n)) {
interval <- hobo_smooth_long %>%
filter(dt %within% hobo_interval2$dt[i]) %>%
mutate(hobo_event_n = hobo_interval2$hobo_event_n[i])
hobo_join <- bind_rows(hobo_join, interval)
}
#Calculating max
hobo_max <- hobo_norm %>%
group_by(site, hobo_event_n) %>%
arrange(dt)%>%
dplyr::summarise(max_yld_mm = max(yield_mm, na.rm=T))
#Join the max rate with the time series to access the time of max for each event
hobo_events3 <- inner_join(hobo_max, hobo_norm,
by = c("site", "hobo_event_n")) %>%
rownames_to_column()
#manually keep the max yield rows
hobo_events4 <- hobo_events3 %>%
mutate(to_keep1 = case_when(yield_mm < max_yld_mm ~ FALSE,
TRUE ~ TRUE )) %>%
# mutate(to_keep2 = case_when (rowname %in% c(51,55,220,234,267,
#                                             1848,1859,1907,2746,
#                                            2990,4203,4207,4210,
#                                             5408,5574,5672,5674,
#                                             5816,5904,7423,7679,
#                                             7981,8536,8537,8691,
#                                             9265,9685,9700,9715,
#                                             9716,9721,11025,11212,
#                                             11213,11417,11418,11419,
#                                             12879,12909,12912,13145,
#                                             13182,13774,13775,13784,
#                                             13827,14155,15234,15235,15892,
#                                             15901,16518,16531,16533,16536) ~ FALSE,
#                              TRUE ~ TRUE))%>%
filter(to_keep1) %>% select(-c( to_keep1,rowname)) %>%
#filter(to_keep2) %>% select(-c( to_keep2,rowname)) %>%
rename("dt_max_yield_mm" = "dt")
hobo_events5 <- hobo_norm %>%
left_join(., hobo_events4,
by = c("site", "hobo_event_n")) %>%
group_by(site, hobo_event_n) %>%
mutate(limb = case_when(dt < dt_max_yield_mm ~ "rising",
dt > dt_max_yield_mm ~ "falling",
dt== dt_max_yield_mm ~ "peak"))
hobo_events6 <- hobo_events5%>%
filter(limb == "falling") %>%
group_by(hobo_event_n, site)%>%
mutate(time =  seconds((dt - dt_max_yield_mm)*60),
time2 = time_length(time, unit = "seconds"))%>%
mutate(log_yield = log(yield_mm.x))
nested_data <- hobo_events6 %>%
group_by(site, hobo_event_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(r = map_dbl(.x = data, .f = ~cor(y=.x$log_yield, x = .x$time2,
use = "na.or.complete")),
m = map_dbl(data, ~lm(log_yield ~ time2, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(log_yield ~ time2, data = .)$coefficients[[1]]),
r2 = r^2)%>%
rename(hobo_data = data)
nested_data_plot <- nested_data %>%
mutate(
map(hobo_data, ~ ggplot(., aes(x = time2, y = log_yield)) +
geom_point() +
geom_smooth(se = TRUE,colour = 'blue')
)
) %>%
rename(plot_hobo = `map(...)`)
nested_data_plot$plot_hobo[33]
events = levels(as.factor(nested_data_plot$hobo_event_n))
p = vector("list", length(events))
names(p) = events
View(p)
for(i in 1:length(events)){
p[[i]] = ggplot(nested_data_plot[nested_data_plot$hobo_event_n == events[i],], aes(x,y)) + geom_line(paste(events[i])) + facet_wrap(~site, ncol=1)
}
for(i in 1:length(events)){
p[[i]] = ggplot(nested_data_plot[nested_data_plot$hobo_event_n == events[i],],
aes(x= nested_data$time2,y=nested_data$log_yield)) + geom_line(paste(events[i])) +
facet_wrap(~site, ncol=1)
}
for(i in 1:length(events)){
p[[i]] = ggplot(nested_data_plot[nested_data_plot$hobo_event_n == events[i],],
aes(x= nested_data$time2,y=nested_data$log_yield)) + #geom_line(paste(events[i])) +
facet_wrap(~site, ncol=1)
}
View(p)
multiplot(p$'1', p$'2', p$'3', p$'4',p$'5', p$'6', p$'7',p$'8',p$'9', cols = 2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p$'1', p$'2', p$'3', p$'4',p$'5', p$'6', p$'7',p$'8',p$'9', cols = 2)
library(grid)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
library(grid)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library(grid)
multiplot(p$'1', p$'2', p$'3', p$'4',p$'5', p$'6', p$'7',p$'8',p$'9', cols = 2)
events = levels(as.factor(nested_data$hobo_event_n))
p = vector("list", length(events))
names(p) = events
for(i in 1:length(events)){
p[[i]] = ggplot(nested_data[nested_data$hobo_event_n == events[i],],
aes(x= nested_data$time2,y=nested_data$log_yield)) + #geom_line(paste(events[i])) +
facet_wrap(~nested_data$site, ncol=1)
}
library(grid)
multiplot(p$'1', p$'2', p$'3', p$'4',p$'5', p$'6', p$'7',p$'8',p$'9', cols = 2)
events = levels(as.factor(nested_data$hobo_event_n))
p = vector("list", length(events))
names(p) = events
for(i in 1:length(events)){
p[[i]] = ggplot(nested_data[nested_data$hobo_event_n == events[i],],
aes(x= nested_data$time2,y=nested_data$log_yield)) + #geom_line(paste(events[i])) +
facet_wrap(~nested_data$site, ncol=1)
}
multiplot(p$'1', p$'2', p$'3', p$'4',p$'5', p$'6', p$'7',p$'8',p$'9', cols = 2)
View(p)
multiplot(p$"1", p$'2', cols = 2)
multiplot(p$1, p$2, cols = 2)
sites = levels(as.factor(nested_data$site))
p = vector("list", length(sites))
names(p) = sites
for(i in 1:length(sites)){
p[[i]] = ggplot(nested_data[nested_data$site == events[i],],
aes(x= nested_data$time2,y=nested_data$log_yield)) + #geom_line(paste(events[i])) +
facet_wrap(~nested_data$hobo_event_n, ncol=1)
}
View(p)
library(grid)
multiplot(p$SFA_mm, p$SFB_mm, p$SFC_mm, p$SFD_mm, p$TFB_mm, p$TFD_mm, cols = 2)
multiplot( p$TFB_mm, p$TFD_mm, cols = 2)
sites = levels(as.factor(nested_data$site))
p = vector("list", length(sites))
names(p) = sites
for(i in 1:length(sites)){
p[[i]] = ggplot(nested_data[nested_data$site == events[i],],
aes(x= nested_data[[time2]],y=nested_data[[log_yield]])) + #geom_line(paste(events[i])) +
facet_wrap(~nested_data$hobo_event_n, ncol=1)
}
library(grid)
multiplot( p$TFB_mm, p$TFD_mm, cols = 2)
sites = levels(as.factor(nested_data$site))
p = vector("list", length(sites))
names(p) = sites
for(i in 1:length(sites)){
p[[i]] = ggplot(nested_data[nested_data$site == events[i],],
aes(x= time2,y=log_yield)) + #geom_line(paste(events[i])) +
facet_wrap(~nested_data$hobo_event_n, ncol=1)
}
library(grid)
multiplot( p$TFB_mm, p$TFD_mm, cols = 2)
sites = levels(as.factor(nested_data$site))
p = vector("list", length(sites))
names(p) = sites
for(i in 1:length(sites)){
p[[i]] = ggplot(nested_data[nested_data$site == sites[i],],
aes(x= time2,y=log_yield)) + #geom_line(paste(events[i])) +
facet_wrap(~nested_data$hobo_event_n, ncol=1)
}
library(grid)
multiplot( p$TFB_mm, p$TFD_mm, cols = 2)
sites = levels(as.factor(nested_data$site))
p = vector("list", length(sites))
names(p) = sites
for(i in 1:length(sites)){
p[[i]] = ggplot(nested_data[nested_data$site == sites[i],],
aes(x= nested_data$time2,y=nested_data$log_yield)) + #geom_line(paste(events[i])) +
facet_wrap(~nested_data$hobo_event_n, ncol=1)
}
library(grid)
multiplot( p$TFB_mm, p$TFD_mm, cols = 2)
events = levels(as.factor(nested_data$hobo_event_n))
p = vector("list", length(events))
names(p) = events
for(i in 1:length(events)){
p[[i]] = ggplot(nested_data[nested_data$hobo_event_n == events[i],],
aes(x= nested_data$time2,y=nested_data$log_yield)) + #geom_line(paste(events[i])) +
facet_wrap(~nested_data$site, ncol=1)
}
library(grid)
multiplot( p$'1', p$'2', cols = 2)
View(p)
events = levels(as.factor(nested_data$hobo_event_n))
p = vector("list", length(events))
names(p) = events
for(i in 1:length(events)){
p[[i]] = ggplot(nested_data[nested_data$hobo_event_n == events[i],],
aes(x= nested_data$time2,y=nested_data$log_yield)) + #geom_line(paste(events[i])) +
facet_wrap(~nested_data$site, ncol=1)
}
library(grid)
multiplot( p$'1', p$'2', cols = 2)
library(grid)
multiplot( p$'1', p$'2', p$'3', p$'4', p$'5', p$'6', p$'7', p$'8', p$'9', cols = 2)
View(interval)
View(nested_data_plot)
View(nested_data)
View(nested_data_plot)
events = levels(as.factor(nested_data_plot$hobo_event_n))
p = vector("list", length(events))
names(p) = events
events = levels(as.factor(nested_data_plot$hobo_data))
nested_data_facet <- nested_data_plot%>%
group_by(site,hobo_event_n)%>%
mutate(events = levels(as.factor(nested_data_plot$hobo_event_n)))
nested_data_facet <- nested_data_plot%>%
group_by(site,hobo_event_n)%>%
mutate(events = levels(as.factor(hobo_event_n)))
View(nested_data_facet)
nested_data_facet <- nested_data_plot%>%
group_by(site,hobo_event_n)%>%
mutate(events = levels(as.factor(hobo_event_n)), p = vector("list", length(events)),
names(p) = events)
nested_data_facet <- nested_data_plot%>%
group_by(site,hobo_event_n)%>%
mutate(events = levels(as.factor(hobo_event_n)), p = vector("list", length(events)))
nested_data_facet <- nested_data_plot%>%
group_by(site,hobo_event_n)%>%
mutate(events = levels(as.factor(hobo_event_n)), p = vector("list", length(events)))
View(nested_data_facet)
names(p) = events
nested_data_facet <- nested_data_plot%>%
group_by(site,hobo_event_n)%>%
mutate(events = levels(as.factor(hobo_event_n)), p = vector("list", length(events)),
names(p) <- events)
View(nested_data_plot)
View(nested_data_facet)
View(nested_data_facet[[3]][[1]])
library(grid)
multiplot( nested_data_plot$plot_hobo[1:54], cols = 2)
use warnings()
warnings()
multiplot(nested_data_plot$plot_hobo[1:9], cols = 2)
library(grid)
multiplot(nested_data_plot$plot_hobo[1:4], cols = 2)
p<-nested_data_plot$plot_hobo[1:54]
View(p)
p<-nested_data_plot$plot_hobo[1:54]
require(gridExtra)
# plot1 <- qplot(1)
# plot2 <- qplot(1)
grid.arrange(p, ncol=2)
require(gridExtra)
plot1 <- qplot(nested_data_plot$plot_hobo[33])
plot2 <- qplot(nested_data_plot$plot_hobo[34])
grid.arrange(plot1,plot2, ncol=2)
View(nested_data_plot[[3]][[1]])
View(nested_data_facet[[3]][[1]])
nd <-nested_data%>%
unnest(nested_data)
nested_data <- hobo_events6 %>%
group_by(site, hobo_event_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(r = map_dbl(.x = data, .f = ~cor(y=.x$log_yield, x = .x$time2,
use = "na.or.complete")),
m = map_dbl(data, ~lm(log_yield ~ time2, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(log_yield ~ time2, data = .)$coefficients[[1]]),
r2 = r^2)%>%
rename(hobo_data = data)%>%
unnest()
View(nested_data)
nested_data <- hobo_events6 %>%
group_by(site, hobo_event_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(r = map_dbl(.x = data, .f = ~cor(y=.x$log_yield, x = .x$time2,
use = "na.or.complete")),
m = map_dbl(data, ~lm(log_yield ~ time2, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(log_yield ~ time2, data = .)$coefficients[[1]]),
r2 = r^2)%>%
rename(hobo_data = data)
nd <-nested_data%>%
unnest(hobo_data)
View(nd)
View(nd)
nd <-nested_data%>%
unnest(hobo_data)%>%
select(time2,log_yield_site, hobo_event_n)
nd <-nested_data%>%
unnest(hobo_data)%>%
select(time2,log_yield, site, hobo_event_n)
View(nd)
nd <-nested_data%>%
unnest(hobo_data)%>%
select(time2,log_yield, site, hobo_event_n)%>%
group_by(site, hobo_event_n)
View(nd)
nd <-nested_data%>%
unnest(hobo_data)%>%
select(time2,log_yield, site, hobo_event_n)%>%
group_by(site, hobo_event_n) %>%
ggplot(data = .) +
geom_histogram(mapping = aes(x=time2, y =log_yield)) +
facet_wrap(~ site)
ggplot(data = .) +
geom_histogram(mapping = aes(x=time2, y =log_yield)) +
facet_wrap(~ site)
View(nd)
nd <-nested_data%>%
unnest(hobo_data)%>%
select(time2,log_yield, site, hobo_event_n)%>%
group_by(site, hobo_event_n)
nd <-nested_data%>%
unnest(hobo_data)%>%
select(time2,log_yield, site, hobo_event_n)%>%
group_by(site, hobo_event_n) %>%
ggplot(data = nd ) +
geom_line(mapping = aes(x=time2, y =log_yield)) +
facet_wrap(~ site)
nd <-nested_data%>%
unnest(hobo_data)%>%
select(time2,log_yield, site, hobo_event_n)%>%
group_by(site, hobo_event_n) %>%
ggplot() +
geom_line(mapping = aes(x=time2, y =log_yield)) +
facet_wrap(~ site)
nd <-nested_data%>%
unnest(hobo_data)%>%
select(time2,log_yield, site, hobo_event_n)%>%
group_by(site, hobo_event_n)
library(grid)
multiplot(nested_data_plot$plot_hobo[1:54], cols = 2)
p<-nested_data_plot$plot_hobo[1:54]
View(p)
