r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2)
View(nested_hobo_events)
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data) %>%
ungroup()
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data) %>%
ungroup() %>%
# mutate(cv = sd(m) / mean(m) * 100) %>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2)
View(nested_hobo_events[[2]][[1]])
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data) %>%
ungroup() %>%
# mutate(cv = sd(m) / mean(m) * 100) %>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
ggplot(nested_hobo_events) +
geom_jitter(mapping = aes(x=as.factor(hobo_event_n) , y= m, colour = site))
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n")) %>%
group_by(recession_n, dt_interval)%>%
mutate(event_dur_num = as.numeric(dt_interval), units="secs")
View(all_events)
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n")) %>%
group_by(recession_n, dt_interval)%>%
mutate(event_dur_num = seconds(dt_interval), units="secs")
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n")) %>%
group_by(recession_n, dt_interval)%>%
mutate(event_dur_num = seconds(dt_interval), units="secs") %>% ##24hrs event
mutate(event_intensity = W9_Precipitation_mm/event_dur_num)
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n")) %>%
group_by(recession_n, dt_interval)%>%
mutate(event_dur_num = as.numeric(dt_interval),
units="secs") %>% ##24hrs event
mutate(event_intensity = W9_Precipitation_mm/event_dur_num) %>%
ungroup() %>%
group_by(event_n) %>%
mutate(cv = sd(m) / mean(m) * 100) %>%
ungroup()
t1 <-ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
t1
t1 <-ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
t2 <-ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_10d, colour = site))
t3<-ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_30d, colour = site))
t4<-ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_inf, colour = site))
t4
s1 <-ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
s2 <-ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_10d, colour = site))
s3 <-ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_30d, colour = site))
s4 <-ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_inf, colour = site))
s4
a1 <- ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
a2 <- ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
a2
a2 <- ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=m , y= event_intensity, colour = site))
a2
s4 <-ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=m , y= api_inf, colour = site))
s4
s4 <-ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_inf, colour = site))
a2 <- ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=m , y= event_intensity, colour = site))
a2
a1 <- ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=m , y= event_intensity, colour = site))
a1
p1 <- ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=event_intensity, y= m, colour = site))
p1
p2 <- ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=event_intensity, y= m, colour = site))
p2
ggsave(filename = "ei_m_TF.png", plot = p1, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "ei_m_SF.png", plot = p2, path = paste0(here, "/output/figs/"),
device = "png")
p1 <- ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=event_intensity, y= m, colour = site)) +
theme_bw()
p1
p2 <- ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=event_intensity, y= m, colour = site)) +
theme_bw()
p2
p1 <- ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=event_intensity, y= m, colour = site),
size = 5) +
theme_bw()
p1
p2 <- ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=event_intensity, y= m, colour = site),
size = 5) +
theme_bw()
p2
ggsave(filename = "ei_m_TF.png", plot = p1, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "ei_m_SF.png", plot = p2, path = paste0(here, "/output/figs/"),
device = "png")
event8a <- all_events2%>%
# filter(!str_detect(site, "TF"))%>%
filter(event_n == 1)%>%
pivot_wider(names_from = "site", values_from = "yield_norm")%>%
pivot_longer(cols = c("SF-A","SF-C") , names_to = "Sugar_Maple",
values_to = "SM_yield")%>%
pivot_longer(cols = c("SF-B", "SF-D") , names_to = "Yellow_Birch",
values_to = "YB_yield")%>%
pivot_longer(cols = c("SM_yield","YB_yield") , names_to = "stemflow",
values_to = "SF_yield")%>%
pivot_longer(cols = c("TF-B","TF-D") , names_to = "Throughfall",
values_to = "TF_yield")%>%
distinct(SF_yield,TF_yield, .keep_all = TRUE)
all_events2<- inner_join(hourly_ppt_events, hobo_events_new,
by = c( "recession_n"))%>%
group_by(site)%>%
mutate(yield_norm = yield_mm + abs(min(yield_mm)))%>%
ungroup()
event8a <- all_events2%>%
# filter(!str_detect(site, "TF"))%>%
filter(event_n == 1)%>%
pivot_wider(names_from = "site", values_from = "yield_norm")%>%
pivot_longer(cols = c("SF-A","SF-C") , names_to = "Sugar_Maple",
values_to = "SM_yield")%>%
pivot_longer(cols = c("SF-B", "SF-D") , names_to = "Yellow_Birch",
values_to = "YB_yield")%>%
pivot_longer(cols = c("SM_yield","YB_yield") , names_to = "stemflow",
values_to = "SF_yield")%>%
pivot_longer(cols = c("TF-B","TF-D") , names_to = "Throughfall",
values_to = "TF_yield")%>%
distinct(SF_yield,TF_yield, .keep_all = TRUE)
#models
hobo_events_new2 <- hobo_events_new %>%
mutate(sec = seconds(dt) - min(seconds(dt)),
sec_norm = sec/max(sec),
yld_mm_norm1 = yield_mm + abs(min(yield_mm)),
yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1),
power_yield = 10^yld_mm_norm2)
#models
hobo_events_new2 <- hobo_events_new %>%
mutate(sec = seconds(dt) - min(seconds(dt)),
sec_norm = sec/max(sec),
yld_mm_norm1 = yield_mm - min(yield_mm),
yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1),
power_yield = 10^yld_mm_norm2)
all_events2<- inner_join(hourly_ppt_events, hobo_events_new,
by = c( "recession_n"))%>%
group_by(site)%>%
mutate(yld_mm_norm1 = yield_mm - min(yield_mm),
yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1)) %>%
ungroup()
event8a <- all_events2%>%
# filter(!str_detect(site, "TF"))%>%
filter(event_n == 1)%>%
pivot_wider(names_from = "site", values_from = "yield_norm")%>%
pivot_longer(cols = c("SF-A","SF-C") , names_to = "Sugar_Maple",
values_to = "SM_yield")%>%
pivot_longer(cols = c("SF-B", "SF-D") , names_to = "Yellow_Birch",
values_to = "YB_yield")%>%
pivot_longer(cols = c("SM_yield","YB_yield") , names_to = "stemflow",
values_to = "SF_yield")%>%
pivot_longer(cols = c("TF-B","TF-D") , names_to = "Throughfall",
values_to = "TF_yield")%>%
distinct(SF_yield,TF_yield, .keep_all = TRUE)
event8a <- all_events2%>%
# filter(!str_detect(site, "TF"))%>%
filter(event_n == 1)%>%
pivot_wider(names_from = "site", values_from = "yield_mm_norm2")%>%
pivot_longer(cols = c("SF-A","SF-C") , names_to = "Sugar_Maple",
values_to = "SM_yield")%>%
pivot_longer(cols = c("SF-B", "SF-D") , names_to = "Yellow_Birch",
values_to = "YB_yield")%>%
pivot_longer(cols = c("SM_yield","YB_yield") , names_to = "stemflow",
values_to = "SF_yield")%>%
pivot_longer(cols = c("TF-B","TF-D") , names_to = "Throughfall",
values_to = "TF_yield")%>%
distinct(SF_yield,TF_yield, .keep_all = TRUE)
all_events2<- inner_join(hourly_ppt_events, hobo_events_new,
by = c( "recession_n"))%>%
group_by(site)%>%
mutate(yld_mm_norm1 = yield_mm - min(yield_mm),
yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1)) %>%
ungroup()
event8a <- all_events2%>%
# filter(!str_detect(site, "TF"))%>%
filter(event_n == 1)%>%
pivot_wider(names_from = "site", values_from = "yield_mm_norm2")%>%
pivot_longer(cols = c("SF-A","SF-C") , names_to = "Sugar_Maple",
values_to = "SM_yield")%>%
pivot_longer(cols = c("SF-B", "SF-D") , names_to = "Yellow_Birch",
values_to = "YB_yield")%>%
pivot_longer(cols = c("SM_yield","YB_yield") , names_to = "stemflow",
values_to = "SF_yield")%>%
pivot_longer(cols = c("TF-B","TF-D") , names_to = "Throughfall",
values_to = "TF_yield")%>%
distinct(SF_yield,TF_yield, .keep_all = TRUE)
event8a <- all_events2%>%
# filter(!str_detect(site, "TF"))%>%
filter(event_n == 1)%>%
pivot_wider(names_from = "site", values_from = "yld_mm_norm2")%>%
pivot_longer(cols = c("SF-A","SF-C") , names_to = "Sugar_Maple",
values_to = "SM_yield")%>%
pivot_longer(cols = c("SF-B", "SF-D") , names_to = "Yellow_Birch",
values_to = "YB_yield")%>%
pivot_longer(cols = c("SM_yield","YB_yield") , names_to = "stemflow",
values_to = "SF_yield")%>%
pivot_longer(cols = c("TF-B","TF-D") , names_to = "Throughfall",
values_to = "TF_yield")%>%
distinct(SF_yield,TF_yield, .keep_all = TRUE)
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2,
predict = sec_norm*m + i) %>%
unnest(data) %>%
ungroup() %>%
# mutate(cv = sd(m) / mean(m) * 100) %>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
#models
hobo_events_new2 <- hobo_events_new %>%
mutate(sec = seconds(dt) - min(seconds(dt)),
sec_norm = sec/max(sec),
yld_mm_norm1 = yield_mm - min(yield_mm),
yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1),
power_yield = 10^yld_mm_norm2)
hobo_events_new2[c('power_yield')][sapply(hobo_events_new2[c('power_yield')], is.infinite)] <- NA
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2,
predict = sec_norm*m + i) %>%
unnest(data) %>%
ungroup() %>%
# mutate(cv = sd(m) / mean(m) * 100) %>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2,
predict = map_dbl(data, ~.$sec_norm*.$m + .$i)) %>%
unnest(data) %>%
ungroup() %>%
# mutate(cv = sd(m) / mean(m) * 100) %>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2,
predict = map_dbl(data, ~.x$sec_norm*.x$m + .x$i)) %>%
unnest(data) %>%
ungroup() %>%
# mutate(cv = sd(m) / mean(m) * 100) %>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
mutate(predict = map_dbl(.x = data, .f= ~.x$sec_norm*.x$m + .x$i)) %>%
unnest(data) %>%
ungroup() %>%
# mutate(cv = sd(m) / mean(m) * 100) %>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
mutate(predict = map_dbl(.x = data, .f= ~.x$sec_norm*.x$m + .x$i))
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2)
View(nested_hobo_events)
View(nested_hobo_events[[2]][[1]])
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data) %>%
ungroup()
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
#to avoid weird issues with Excel formating, use csv for importing.
#Example csv I created quickly
curve_intervals <- read_csv(paste0(here, "/data/hobo_new_utf.csv"))
tz(curve_intervals$Start_dt_EST)
curve_intervals2 <- curve_intervals %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
# tz(curve_intervals2$datetime_interval_EST)
sapply(curve_intervals2, class)
#Filter out multiple intervals
#edit site ids to match
hobo_events2 <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B",
site == "SFC_mm" ~ "SF-C",
site == "SFD_mm" ~ "SF-D",
site == "TFB_mm" ~ "TF-B",
site == "TFD_mm" ~ "TF-D"))
#get list of site names to loop through
sites <- unique(curve_intervals2$site)
#create an empty dataframe with same headers
hobo_events_new <- slice(hobo_events2, 0)
#create a double loop to loop through sites and through curve intervals within each site
for(i in sites) {
ts <- hobo_events2 %>% filter(site == i) #filter time series
int <- curve_intervals2 %>% filter(site == i) #filter interval list
for (j in 1:length(int$recession_n)) {
interval <- ts %>%
filter(dt %within% int$datetime_interval_EST[j]) %>%
mutate(recession_n = int$recession_n[j])
hobo_events_new <- bind_rows(hobo_events_new, interval)
}
}
rm(ts, int, interval)
#Check and correct timezone
tz(hobo_events_new$dt)
xts <- xts(hobo_events_new %>% select(dt, yield_mm), order.by=hobo_events_new$dt)
dygraph(xts) %>% #dyAxis("y", valueRange = c(-1, 1)) %>%
# dyOptions(connectSeparatedPoints = FALSE)%>%
dygraphs::dyOptions(drawPoints = T, strokeWidth = 0, pointSize = 5)%>%
dyRangeSelector()
#connect separated points
#Testing the antecedent precipitation index function
#load and format precipitation data
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv")) %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
filter(minute(datetime_EST2) == 0) %>% #remove subhourly timestamps
select(-W9_Streamflow_mm_hr) %>%
arrange(datetime_EST2) #Order from earliest to latest timestamp
#load API function
source(paste0(here, "/src/API.R"))
#UNDERSTAND EXAMPLES
## the larger n, the closer are the solutions
x <- rexp(1000)
plot(x) #simulated rain record
#x = rain record; k=decay factor; n=timesteps to use; finite TRUE means use finite number of timesteps indicated by n; finite FALSE means do not use n
api1 <- getApi(x=x,k= 0.9, n=10, finite=TRUE)
plot(api1)
api2 <- getApi(x=x, finite=FALSE)
plot(api2)
plot(api1 ~ api2)
api22 <- getApi(x=x, n=10, finite=FALSE)
plot(api1~api22)
x <- rexp(1000)
api3 <- getApi(x=x,n=300, finite=TRUE)
plot(api3) #notice first api starts at 300
api4 <- getApi(x=x,finite=FALSE)
plot(api4) #api calculated since first day
plot(api3~api4)
par(mfcol=c(2,1))
plot(x=api1,y=api2)
hobo_events_new2 <- hobo_events_new %>%
mutate(sec = seconds(dt) - min(seconds(dt)),
sec_norm = sec/max(sec),
yld_mm_norm1 = yield_mm - min(yield_mm),
yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1),
power_yield = 10^yld_mm_norm2)
hobo_events_new2[c('power_yield')][sapply(hobo_events_new2[c('power_yield')], is.infinite)] <- NA
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data) %>%
ungroup() %>%
# mutate(cv = sd(m) / mean(m) * 100) %>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
ggplot(nested_hobo_events) +
geom_jitter(mapping = aes(x=as.factor(hobo_event_n), y= m, colour = site))
dygraph(xts) %>% #dyAxis("y", valueRange = c(-1, 1)) %>%
# dyOptions(connectSeparatedPoints = FALSE)%>%
dygraphs::dyOptions(drawPoints = T, strokeWidth = 0, pointSize = 5)%>%
dyRangeSelector()
