filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
#Check and correct timezone
tz(hobo_SFA_events $dt)
attr(hobo_SFA_events$dt, "tzone") <- "EST"
tz(hobo_SFA_events $dt)
#Now the hourly time series record is filtered with event numbers
SFA_xts <- xts(hobo_SFA_events %>% select(dt, yield_mm), order.by=hobo_SFA_events$dt)
dygraph(SFA_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
# getApi(x, k = 0.9, n = 5, finite = TRUE)
#0.0 Setup ----
library(tidyverse) #this is a set of several packages including 'readr'
require(tidyverse)
install.packages("tidyverse")
install.packages("here")
install.packages("fs")
#0.0 Setup ----
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
here <- here() #create a filepath object named "here" to use later
library(lubridate) #lubridate needs to be loaded separately
library(fs)
W9_Ppt_eventsummary_file <- readRDS("C:/Users/kevin/My Drive (kevin.alexander.ryan@gmail.com)/ToShareUSGS/Prerana Bhaumik/pb_20230727/first_repo/output/W9_Ppt_eventsummary_file.Rds")
View(W9_Ppt_eventsummary_file)
library(xts)
library(xts)
library(dygraphs)
here <- here()
library(lubridate)
library(dygraphs)
library(xts)
# library(ggplot2)
library(ggpubr)
library(broom)
hobo_events_limbs<- readRDS(paste0(here, "/output/hobo_limbs.Rds"))
View(hobo_events_limbs)
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
View(hobo_events)
SFA <- hobo_events%>%
filter(site == "SFA_mm")
View(SFA)
SFA_events2 <- SFA_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
SFA_events <- readxl::read_excel(paste0(here, "/data/SFA.xlsx"))
tz(SFA_events$Start_dt_EST) #imported time zone is UTC
sapply(SFA_events, class)
SFA_events2 <- SFA_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
class(SFA_events2$datetime_interval_EST)
tz(SFA_events2$datetime_interval_EST) #timezone of interval gives an error
tz(SFA_events2$Start_dt_EST) #timezone of start is EST
#To check the interval is in EST, we can pull out the start
start <- int_start(SFA_events2$datetime_interval_EST[1])
class(start)
tz(start)
#create an empty dataframe with same headers
hobo_SFA_events <- slice(hobo_events, 0)
for (i in 1:length(SFA_events2$recession_n)) {
interval <- SFA %>%
filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
#Check and correct timezone
tz(hobo_SFA_events $dt)
attr(hobo_SFA_events$dt, "tzone") <- "EST"
tz(hobo_SFA_events $dt)
SFA_xts <- xts(hobo_SFA_events %>% select(dt, yield_mm), order.by=hobo_SFA_events$dt)
dygraph(SFA_xts) %>% #dyAxis("y", valueRange = c(-1, 1)) %>%
# dyOptions(connectSeparatedPoints = FALSE)%>%
dygraphs::dyOptions(drawPoints = T, strokeWidth = 0, pointSize = 5)%>%
dyRangeSelector()
here <- here()
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
curve_intervals <- read_csv(paste0(here, "/data/hobo_new_kar.csv"))
View(curve_intervals)
tz(curve_intervals$Start_dt_EST)
sapply(curve_intervals, class)
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
#Import stemflow and throughfall time intervals
r2_events <- readxl::read_excel(paste0(here, "/data/hobo/hobo_events.xlsx"))
View(r2_events)
#to avoid weird issues with Excel formating, use csv for importing.
#Example csv
W9_precip_events <- read_csv(paste0(here,"/Precip-TF-SF/data/W9_tree_events.csv"))
curve_intervals2 <- curve_intervals %>%
mutate(dt_start = as.POSIXct(Start_dt, format = "%Y-%m-%d %H:%M:%S", tz="EST"),
# dt_end = as.POSIXct(dt_end, format = "%m/%d/%Y %H:%M", tz="America/Cancun"),
# dt_interval = interval(dt_start, dt_end, tz="America/Cancun"),
# event_dur_sec = dseconds(dt_interval)
)
curve_intervals2 <- curve_intervals %>%
mutate(dt_start = as.POSIXct(Start_dt_EST, format = "%Y-%m-%d %H:%M:%S", tz="EST"),
# dt_end = as.POSIXct(dt_end, format = "%m/%d/%Y %H:%M", tz="America/Cancun"),
# dt_interval = interval(dt_start, dt_end, tz="America/Cancun"),
# event_dur_sec = dseconds(dt_interval)
)
curve_intervals <- read_csv(paste0(here, "/data/hobo_new_kar.csv"))
curve_intervals2 <- curve_intervals %>%
mutate(dt_start = as.POSIXct(Start_dt_EST, format = "%Y-%m-%d %H:%M:%S", tz="EST")
# dt_end = as.POSIXct(dt_end, format = "%m/%d/%Y %H:%M", tz="America/Cancun"),
# dt_interval = interval(dt_start, dt_end, tz="America/Cancun"),
# event_dur_sec = dseconds(dt_interval)
)
curve_intervals2 <- curve_intervals %>%
mutate(dt_start = as.POSIXct(Start_dt_EST, format = "%Y-%m-%d\xa0%H:%M:%S", tz="EST")
# dt_end = as.POSIXct(dt_end, format = "%m/%d/%Y %H:%M", tz="America/Cancun"),
# dt_interval = interval(dt_start, dt_end, tz="America/Cancun"),
# event_dur_sec = dseconds(dt_interval)
)
curve_intervals <- read_csv(paste0(here, "/data/hobo_new_kar.csv"))
curve_intervals <- read.csv(paste0(here, "/data/hobo_new_kar.csv"))
curve_intervals <- read.csv(paste0(here, "/data/new_events_kar2.csv"))
curve_intervals <- read.csv(paste0(here, "/data/new_events_kar2.csv"))
curve_intervals <- read.csv(paste0(here, "/data/new_events_kar2.csv"))
curve_intervals <- read_csv(paste0(here, "/data/new_events_kar2.csv"))
curve_intervals <- read_delim(paste0(here, "/data/new_events_kar2.csv"))
curve_intervals <- read_delim(delim = ",",
paste0(here, "/data/new_events_kar2.csv"))
curve_intervals <- read_delim(delim = ",",
paste0(here, "/data/hobo_new_kar.csv"))
curve_intervals <- read_csv(paste0(here, "/data/hobo_new_kar.csv"))
tz(curve_intervals$Start_dt_EST)
curve_intervals2 <- curve_intervals %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST')))
View(curve_intervals2)
curve_intervals2 <- curve_intervals %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
tz(curve_intervals$Start_dt_EST)
tz(curve_intervals2$Start_dt_EST)
#to avoid weird issues with Excel formating, use csv for importing.
#Example csv I created quickly
curve_intervals <- read_csv(paste0(here, "/data/hobo_new_kar.csv"))
tz(curve_intervals$Start_dt_EST)
curve_intervals2 <- curve_intervals %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
tz(curve_intervals2$Start_dt_EST)
sapply(curve_intervals2, class)
View(curve_intervals2)
View(hobo_events)
#Filter out multiple intervals
#create an empty dataframe with same headers
hobo_events_new <- slice(hobo_events, 0)
nest <- nest(hobo_events, site)
View(nest)
View(nest[[4]][[1]])
nest <- hobo_events %>% group_by(site) %>% nest()
View(nest)
View(nest[[2]][[1]])
hobo_events_new <- hobo_events %>%
group_by(site) %>%
filter(site == curve_interval2$site)
hobo_events_new <- hobo_events %>%
group_by(site) %>%
filter(site == curve_intervals2$site)
curve_intervals2$site
hobo_events_new <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B"))
View(hobo_events)
View(hobo_events_new)
hobo_events_new <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B")) %>%
group_by(site) %>%
filter(site == curve_intervals2$site)
curve_intervals2$site
hobo_events_new <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B")) %>%
group_by(site) %>%
filter(site %in% curve_intervals2$site)
hobo_events_new <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B")) %>%
group_by(site) %>%
filter(site %in% curve_intervals2$site &
dt %within% curve_interval2$datetime_interval_EST)
hobo_events_new <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B")) %>%
group_by(site) %>%
filter(site %in% curve_intervals2$site &
dt %within% curve_intervals2$datetime_interval_EST)
View(hobo_events_new)
hobo_events_new <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B")) %>%
group_by(site) %>%
filter(site %in% curve_intervals2$site)
length(curve_intervals2)
hobo_events_new <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B")) %>%
group_by(site) %>%
filter(site %in% curve_intervals2$site &
dt %within% curve_intervals2$datetime_interval_EST[1:length(curve_intervals2)])
#edit site ids to match
hobo_events2 <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B"))
#get list of sites
sites <- curve_intervals2$site
#get list of sites
sites <- curve_intervals2 %>% distinct(site)
View(sites)
#get list of sites
sites <- distinct(curve_intervals2$site)
#get list of sites
sites <- unique(curve_intervals2$site)
#get list of sites
sites <- unique(curve_intervals2$site)
sites
t <-  hobo_events2 %>% filter(site == sites[1])
View(t)
int <- curve_intervals2 %>% filter(site == sites[1]
int <- curve_intervals2 %>% filter(site == sites[1])
View(int)
#create an empty dataframe with same headers
hobo_events_new <- slice(hobo_events2, 0)
View(hobo_events_new)
#create a double loop to loop through sites and through curve intervals
for(i in sites) {
ts <- hobo_events2 %>% filter(site == i) #filter time series
int <- curve_intervals2 %>% filter(site == i) #filter interval list
for (j in 1:length(int$recession_n)) {
interval <- ts %>%
filter(dt %within% int$datetime_interval_EST[k]) %>%
mutate(recession_n = int$recession_n[k])
hobo_events_new <- bind_rows(hobo_events_new, interval)
}
}
#create a double loop to loop through sites and through curve intervals
for(i in sites) {
ts <- hobo_events2 %>% filter(site == i) #filter time series
int <- curve_intervals2 %>% filter(site == i) #filter interval list
for (j in 1:length(int$recession_n)) {
interval <- ts %>%
filter(dt %within% int$datetime_interval_EST[j]) %>%
mutate(recession_n = int$recession_n[j])
hobo_events_new <- bind_rows(hobo_events_new, interval)
}
}
View(hobo_events_new)
View(hobo_events_new)
#Check and correct timezone
tz(hobo_events_new$dt)
xts <- xts(hobo_events_new %>% select(dt, yield_mm), order.by=hobo_events_new$dt)
dygraph(SFA_xts) %>% #dyAxis("y", valueRange = c(-1, 1)) %>%
# dyOptions(connectSeparatedPoints = FALSE)%>%
dygraphs::dyOptions(drawPoints = T, strokeWidth = 0, pointSize = 5)%>%
dyRangeSelector()
dygraph(xts) %>% #dyAxis("y", valueRange = c(-1, 1)) %>%
# dyOptions(connectSeparatedPoints = FALSE)%>%
dygraphs::dyOptions(drawPoints = T, strokeWidth = 0, pointSize = 5)%>%
dyRangeSelector()
#Testing the antecedent precipitation index function
#load precipitation data
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv")) %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M"))
View(ppt)
#Testing the antecedent precipitation index function
#load precipitation data
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv")) %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
filter(minute(datetime_EST2) == 0) %>% #remove subhourly timestamps
select(-W9_Streamflow_mm_hr) %>%
arrange(datetime_EST2) #Order from earliest to latest timestamp
View(ppt)
## the larger n, the closer are the solutions
x <- rexp(1000)
api1 <- getApi(x=x,n=10)
source(paste0(here, "/src/API.R"))
## the larger n, the closer are the solutions
x <- rexp(1000)
api1 <- getApi(x=x,n=10)
plot(api1)
api2 <- getApi(x=x,finite=FALSE)
plot(api2)
plot(api1 ~ api2)
api1 <- getApi(x=x,k= 0.9, n=10, finite=TRUE)
plot(api1)
api2 <- getApi(x=x,finite=FALSE)
plot(api2)
plot(api1 ~ api2)
x <- rexp(1000)
api3 <- getApi(x=x,n=300)
plot(api3)
plot(x)
api2 <- getApi(x=x,n=10, finite=FALSE)
plot(api2)
plot(api1 ~ api2)
api22 <- getApi(x=x, n=10)
plot(api1~api22)
#UNDERSTAND EXAMPLES
## the larger n, the closer are the solutions
x <- rexp(1000)
plot(x) #simulated rain record
#x = rain record; k=decay factor; n=timesteps to use; finite TRUE means use finite number of timesteps indicated by n; finite FALSE means do not use n
api1 <- getApi(x=x,k= 0.9, n=10, finite=TRUE)
plot(api1)
api2 <- getApi(x=x, finite=FALSE)
plot(api2)
plot(api1 ~ api2)
api22 <- getApi(x=x, n=10, finite=TRUE)
plot(api1~api22)
api22 <- getApi(x=x, n=10, finite=FALSE)
plot(api1~api22)
api3 <- getApi(x=x,n=300)
plot(api3)
api4 <- getApi(x=x,finite=FALSE)
plot(api4)
plot(api3~api4)
api3 <- getApi(x=x,n=300)
plot(api3)
plot(api1)
View(ppt)
api3 <- getApi(x=x,n=300)
plot(api3)
api4 <- getApi(x=x,finite=FALSE)
plot(api4)
plot(api3~api4)
plot(api3~api4)
api3 <- getApi(x=x,n=300, finite=TRUE)
plot(api3) #notice first api starts at 300
api4 <- getApi(x=x,finite=FALSE)
plot(api4) #api calculated since first day
plot(api3~api4)
plot(api4) #api calculated since first day
plot(api3) #notice first api starts at 300
par(mfcol=c(2,1))
plot(x=api1,y=api2)
abline(a=0,b=1,col=2)
plot(x=api3,y=api4)
abline(a=0,b=1,col=2)
## user defined weights
x <- rexp(1000)
k <- 1/(15:1)
api <- getApi(x=x,k=k)
plot(x)
dev.off()
## user defined weights
x <- rexp(1000)
plot(x)
k <- 1/(15:1)
k
plot(k)
api5 <- getApi(x=x,k=k, finite=FALSE)
plot(api5)
api5 <- getApi(x=x,k=k, finite=TRUE)
plot(api5)
api_24hr <- getApi(ppt$W9_Precipitation_mm, k = 0.9, n = 24, finite = TRUE)
plot(api_24hr)
api_10d <- getApi(ppt$W9_Precipitation_mm, k = 0.9, n = 24*10, finite = TRUE)
plot(api_10d)
ppt_api <- ppt %>%
mutate(api_24hr = getApi(W9_Precipitation_mm, k = 0.9, n = 24, finite = TRUE))
View(ppt_api)
ppt_api <- ppt %>%
mutate(api_24hr = getApi(W9_Precipitation_mm, k = 0.9, n = 24, finite = TRUE),
api_10d <- getApi(W9_Precipitation_mm, k = 0.9, n = 24*10, finite = TRUE),
api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 24*30, finite = TRUE),
api_infinite = getApi(W9_Precipitation_mm, K=0.9, finite = FALSE))
ppt_api <- ppt %>%
mutate(api_24hr = getApi(W9_Precipitation_mm, k = 0.9, n = 24, finite = TRUE),
api_10d <- getApi(W9_Precipitation_mm, k = 0.9, n = 24*10, finite = TRUE),
api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 24*30, finite = TRUE),
api_infinite = getApi(W9_Precipitation_mm, k = 0.9, finite = FALSE))
View(ppt_api)
ggplot(ppt_api) +
geom_line(aes(x=dt, y=api_24hr))
ggplot(ppt_api) +
geom_line(mapping = aes(x=dt, y=api_24hr))
ggplot(ppt_api) +
geom_line(mapping = aes(x=datetime_EST2, y=api_24hr))
ppt_api <- ppt %>%
mutate(api_24hr = getApi(W9_Precipitation_mm, k = 0.9, n = 24, finite = TRUE),
api_10d <- getApi(W9_Precipitation_mm, k = 0.9, n = 24*10, finite = TRUE),
api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 24*30, finite = TRUE),
api_inf = getApi(W9_Precipitation_mm, k = 0.9, finite = FALSE))
ggplot(ppt_api) +
geom_line(mapping = aes(x=datetime_EST2, y=api_24hr)) +
geom_line(mapping = aes(x=datetime_EST2, y=api_10d), color = "blue") +
geom_line(mapping = aes(x=datetime_EST2, y=api_30d), color = "green") +
geom_line(mapping = aes(x=datetime_EST2, y=api_inf), color = "red")
ggplot(ppt_api) +
geom_line(mapping = aes(x=datetime_EST2, y=api_24hr)) +
geom_line(mapping = aes(x=datetime_EST2, y=api_10d), color = "blue") +
geom_line(mapping = aes(x=datetime_EST2, y=api_30d), color = "green")
ggplot(ppt_api) +
geom_line(mapping = aes(x=datetime_EST2, y=api_24hr)) +
geom_line(mapping = aes(x=datetime_EST2, y=api_10d), color = "blue") +
geom_line(mapping = aes(x=datetime_EST2, y=api_30d), color = "green") +
geom_line(mapping = aes(x=datetime_EST2, y=api_inf), color = "red"
)
ggplot(ppt_api) +
geom_line(mapping = aes(x=datetime_EST2, y=api_24hr)) +
geom_line(mapping = aes(x=datetime_EST2, y=api_10d), color = "blue") +
# geom_line(mapping = aes(x=datetime_EST2, y=api_30d), color = "green")
# geom_line(mapping = aes(x=datetime_EST2, y=api_inf), color = "red"
)
ggplot(ppt_api) +
geom_line(mapping = aes(x=datetime_EST2, y=api_24hr)) +
geom_line(mapping = aes(x=datetime_EST2, y=api_10d), color = "blue")
ggplot(ppt_api) +
geom_line(mapping = aes(x=datetime_EST2, y=api_24hr)) +
# geom_line(mapping = aes(x=datetime_EST2, y=api_10d), color = "blue")
geom_line(mapping = aes(x=datetime_EST2, y=api_30d), color = "green")
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
here <- here()
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
#to avoid weird issues with Excel formating, use csv for importing.
#Example csv I created quickly
curve_intervals <- read_csv(paste0(here, "/data/hobo_new_kar.csv"))
tz(curve_intervals$Start_dt_EST)
curve_intervals2 <- curve_intervals %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
tz(curve_intervals2$Start_dt_EST)
sapply(curve_intervals2, class)
#edit site ids to match
hobo_events2 <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B"))
#get list of site names to loop through
sites <- unique(curve_intervals2$site)
#create an empty dataframe with same headers
hobo_events_new <- slice(hobo_events2, 0)
#create a double loop to loop through sites and through curve intervals within each site
for(i in sites) {
ts <- hobo_events2 %>% filter(site == i) #filter time series
int <- curve_intervals2 %>% filter(site == i) #filter interval list
for (j in 1:length(int$recession_n)) {
interval <- ts %>%
filter(dt %within% int$datetime_interval_EST[j]) %>%
mutate(recession_n = int$recession_n[j])
hobo_events_new <- bind_rows(hobo_events_new, interval)
}
}
#Check and correct timezone
tz(hobo_events_new$dt)
xts <- xts(hobo_events_new %>% select(dt, yield_mm), order.by=hobo_events_new$dt)
dygraph(xts) %>% #dyAxis("y", valueRange = c(-1, 1)) %>%
# dyOptions(connectSeparatedPoints = FALSE)%>%
dygraphs::dyOptions(drawPoints = T, strokeWidth = 0, pointSize = 5)%>%
dyRangeSelector()
#Testing the antecedent precipitation index function
#load and format precipitation data
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv")) %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
filter(minute(datetime_EST2) == 0) %>% #remove subhourly timestamps
select(-W9_Streamflow_mm_hr) %>%
arrange(datetime_EST2) #Order from earliest to latest timestamp
#load API function
source(paste0(here, "/src/API.R"))
ppt_api <- ppt %>%
mutate(api_24hr = getApi(W9_Precipitation_mm, k = 0.9, n = 24, finite = TRUE),
api_10d <- getApi(W9_Precipitation_mm, k = 0.9, n = 24*10, finite = TRUE),
api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 24*30, finite = TRUE),
api_inf = getApi(W9_Precipitation_mm, k = 0.9, finite = FALSE))
ggplot(ppt_api) +
geom_line(mapping = aes(x=datetime_EST2, y=api_24hr)) +
geom_line(mapping = aes(x=datetime_EST2, y=api_10d), color = "blue") +
geom_line(mapping = aes(x=datetime_EST2, y=api_30d), color = "green") +
geom_line(mapping = aes(x=datetime_EST2, y=api_inf), color = "red")
ppt_api <- ppt %>%
mutate(api_24hr = getApi(W9_Precipitation_mm, k = 0.9, n = 24, finite = TRUE),
api_10d = getApi(W9_Precipitation_mm, k = 0.9, n = 24*10, finite = TRUE),
api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 24*30, finite = TRUE),
api_inf = getApi(W9_Precipitation_mm, k = 0.9, finite = FALSE))
ggplot(ppt_api) +
geom_line(mapping = aes(x=datetime_EST2, y=api_24hr)) +
geom_line(mapping = aes(x=datetime_EST2, y=api_10d), color = "blue") +
geom_line(mapping = aes(x=datetime_EST2, y=api_30d), color = "green") +
geom_line(mapping = aes(x=datetime_EST2, y=api_inf), color = "red")
