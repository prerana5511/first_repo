options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time)  %>%
na.omit() %>%
group_by(Time) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate])
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
select(-W9_Streamflow_mm_hr)
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time)  %>%
group_by(Time) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate])
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
select(-W9_Streamflow_mm_hr)
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time)  %>%
na.omit() %>%
group_by(Time) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate])
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
time_to_reach_peak_rate = Time[max_rate]-Time[min_rate])
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
select(-W9_Streamflow_mm_hr)
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
time_to_reach_peak_rate = Time_in_hr[max_rate]-Time_in_hr[min_rate])
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time)  %>%
mutate(Time = Time_in_hr) %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
time_to_reach_peak_rate = Time[max_rate]-Time[min_rate])
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
mutate(Time = Time_in_hr) %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
time_to_reach_peak_rate = Time[max_rate]-Time[min_rate])
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
select(-W9_Streamflow_mm_hr)
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
time_to_reach_peak_rate = datetime_EST2[max_rate]- datetime_EST2[min_rate])
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
select(-W9_Streamflow_mm_hr)
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate])
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
lowest_time = datetime_EST2[min_rate],
time_to_reach_peak_rate = peak_time-lowest_time)
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record i
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
lowest_time = datetime_EST2[min_rate])
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate])
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
peak0_time = datetime_EST2[min_rate])
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
#2.0 ---- Create summary statistics for each event
#use tidy R piping and dplyr::group_by and summarize functions
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
peak0_time = datetime_EST2[min_rate])
##1.2 Assign event numbers/filter ppt time series based on event intervals ----
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
select(-W9_Streamflow_mm_hr)
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
#2.0 ---- Create summary statistics for each event
#use tidy R piping and dplyr::group_by and summarize functions
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
peak0_time = datetime_EST2[min_rate])
na.omit()
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
#2.0 ---- Create summary statistics for each event
#use tidy R piping and dplyr::group_by and summarize functions
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
lowest_time = datetime_EST2[min_rate],
time_to_reach_peak_rate = peak_time-lowest_time)
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
#2.0 ---- Create summary statistics for each event
#use tidy R piping and dplyr::group_by and summarize functions
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
lowest_time = datetime_EST2[min_rate],
time_to_reach_peak_rate = peak_time-lowest_time)   %>%
na.omit()
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
#2.0 ---- Create summary statistics for each event
#use tidy R piping and dplyr::group_by and summarize functions
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
lowest_time = datetime_EST2[min_rate],
time_to_reach_peak_rate = peak_time-lowest_time)
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
#2.0 ---- Create summary statistics for each event
#use tidy R piping and dplyr::group_by and summarize functions
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate],
lowest_time = datetime_EST2[min_rate],
time_to_reach_peak_rate = (peak_time-lowest_time))
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
#Now the time series record is filtered with event numbers
#2.0 ---- Create summary statistics for each event
#use tidy R piping and dplyr::group_by and summarize functions
options(dplyr.summarise.inform = FALSE)
ppt_events <- ppt_events %>%
mutate(Time_in_hr = hour(datetime_EST2) + minute(datetime_EST2)/60 + second(datetime_EST2)/3600) %>%
mutate(Rate = W9_Precipitation_mm/Time_in_hr)  %>%
na.omit() %>%
group_by(Time_in_hr) %>%
summarise(Total_ppt = sum(W9_Precipitation_mm),
min_ppt = min(W9_Precipitation_mm), max_ppt = max(W9_Precipitation_mm),
min_rate = min(Rate), max_rate = max(Rate), peak_time = datetime_EST2[max_rate])
