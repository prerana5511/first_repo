mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_C_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#SF-D-----
site <- "SF-D"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_D_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#TF-B-----
site <- "TF-B"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["TF_L_mm"]], #0.09 L/mm depth in Trash bin
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["TFB_D_Area_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#TF-D-----
site <- "TF-D"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["TF_L_mm"]], #0.09 L/mm depth in Trash bin
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["TFB_D_Area_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
# Chunk 3
site <- "SF-A"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo2 %>% rename("SFA_mm" = yield_mm_hobo)
site <- "SF-B"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("SFB_mm" = yield_mm_hobo),
by = "dt")
site <- "SF-C"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("SFC_mm" = yield_mm_hobo),
by = "dt")
site <- "SF-D"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("SFD_mm" = yield_mm_hobo),
by = "dt")
site <- "TF-B"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("TFB_mm" = yield_mm_hobo),
by = "dt")
site <- "TF-D"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("TFD_mm" = yield_mm_hobo),
by = "dt")
#interactive plot of throughfall
hobo_all_xts <- xts(hobo_all %>% select(dt, TFB_mm, TFD_mm),
order.by=hobo_all$dt)
dygraph(hobo_all_xts) %>% dyAxis("y", valueRange = c(-1, 100)) %>%
dyRangeSelector() %>% dyOptions(useDataTimezone = TRUE)
#interactive plot of stemflow
hobo_all2_xts <- xts(hobo_all %>% select(dt, SFA_mm, SFB_mm, SFC_mm, SFD_mm),
order.by=hobo_all$dt)
dygraph(hobo_all2_xts) %>% dyAxis("y", valueRange = c(-0.1, 1)) %>%
dyRangeSelector() %>% dyOptions(useDataTimezone = TRUE)
saveRDS(hobo_all, paste0(here,"/output/hobo_compiled_wide.Rds"))
# Chunk 4
#Import stemflow and throughfall time intervals
r2_events <- readxl::read_excel(paste0(here, "/data/hobo/hobo_events.xlsx"))
tz(r2_events$start_time_EST) #imported time zone is UTC
sapply(r2_events, class)
r2_events2 <- r2_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = end_time_EST,
datetime_interval_EST = lubridate::interval(start = start_time_EST,
end = end_time_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
class(r2_events2$datetime_interval_EST)
tz(r2_events2$datetime_interval_EST) #timezone of interval gives an error
tz(r2_events2$start_time_EST) #timezone of start is EST
view(r2_events2)
#To check the interval is in EST, we can pull out the start
start <- int_start( r2_events2$datetime_interval_EST[1])
class(start)
tz(start)
intervals <- r2_events2
#save
saveRDS(intervals, paste0(here, "/output/hobo_intervals.rds"))
rm(r2_events, r2_events2)
hobo_all <- readRDS(paste0(here,"/output/hobo_compiled_wide.Rds"))
# hobo_rec <- hobo_all %>%
#   mutate(.after = TFD_mm, #indicates where the new column is placed
#          dt2 = as.POSIXct(dt, format = "%m/%d/%Y %H:%M")) %>%
#   filter(minute(dt2) == 0) %>% #remove subhourly timestamps
#   arrange(dt2) #Order from earliest to latest timestamp
#create an empty dataframe with same headers
hobo_events <- slice(hobo_all, 0)
i=1
rm(i)
for (i in 1:length(intervals$hobo_event_n)) {
interval <- hobo_all %>%
filter(dt %within% intervals$datetime_interval_EST[i]) %>%
mutate(hobo_event_n = intervals$hobo_event_n[i])
hobo_events <- bind_rows(hobo_events, interval)
}
#Check timezone
tz(hobo_events$dt)
#Now the hourly time series record is filtered with event numbers
hobo_events2 <- hobo_events%>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm")%>%
group_by(site, dt) %>%
arrange(dt)%>%
ungroup()%>%
select(dt, site,  yield_mm, hobo_event_n)%>%
drop_na()
#
saveRDS(hobo_events2, paste0(here, "/output/hobo_events.Rds"))
View(hobo_events)
View(intervals)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(ggplot2)
library(scales)
hobo_all <- readRDS(paste0(here,"/output/hobo_compiled_wide.Rds"))
hobo_events_r5 <- readRDS(paste0(here, "/output/hobo_events.Rds"))%>%
rename("cumyield_mm" = "yield_mm")
hobo_events_r5_wide <- hobo_events_r5%>%
pivot_wider(names_from = "site", values_from = "cumyield_mm")
SF_xts <- xts(hobo_events_r5_wide %>% select(dt, hobo_event_n, SFA_mm, SFB_mm, SFC_mm, SFD_mm),
order.by=hobo_events_r5_wide$dt)
dygraph(SF_xts) %>% dyAxis("y", valueRange = c(-0.1, 1)) %>%
dyRangeSelector() %>% dyOptions(useDataTimezone = TRUE)
theme_set(theme_bw())
ggplot(hobo_events_r5 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
events <- readxl::read_excel(paste0(here, "/data/Book1.xlsx"))
tz(events$Start_dt_EST) #imported time zone is UTC
sapply(events, class)
r5_events <- events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
View(r5_events)
hobo_events <- slice(hobo_all, 0)
for (i in 1:length(r5_events$recession_n)) {
interval <- hobo_events_r5 %>%
filter(dt %within% r5_events$datetime_interval_EST[i]) %>%
mutate(recession_n = r5_events$recession_n[i])
hobo_events <- bind_rows(hobo_events, interval)
}
View(hobo_events)
#create an empty dataframe with same headers
hobo_events <- slice(r5_events, 0)
for (i in 1:length(r5_events$recession_n)) {
interval <- hobo_events_r5 %>%
filter(dt %within% r5_events$datetime_interval_EST[i]) %>%
mutate(recession_n = r5_events$recession_n[i])
hobo_events <- bind_rows(hobo_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
hobo_events <- slice(r5_events, 0)
for (i in 1:length(r5_events$recession_n)) {
interval <- hobo_events_r5 %>%
filter(dt %within% r5_events$datetime_interval_EST[i]) %>%
mutate(recession_n = r5_events$recession_n[i])
hobo_events <- bind_rows(hobo_events, interval)
}
View(hobo_events)
hobo_events_r5 <- readRDS(paste0(here, "/output/hobo_events.Rds"))%>%
rename("cumyield_mm" = "yield_mm")
hobo_events_r5_wide <- hobo_events_r5%>%
pivot_wider(names_from = "site", values_from = "cumyield_mm")
hobo_all <- readRDS(paste0(here,"/output/hobo_compiled_wide.Rds"))%>%
pivot_longer(cols = c("SFA_mm","SFB_mm","SFC_mm", "SFD_mm") , names_to = "Site",
values_to = "Cum_yield")
View(hobo_all)
hobo_all <- readRDS(paste0(here,"/output/hobo_compiled_wide.Rds"))%>%
pivot_longer(cols = c("SFA_mm","SFB_mm","SFC_mm", "SFD_mm", "TFB_mm", "TFD_mm") , names_to = "Site",
values_to = "Cum_yield")
View(hobo_all)
View(hobo_events_r5)
hobo_all <- readRDS(paste0(here,"/output/hobo_compiled_wide.Rds"))%>%
pivot_longer(cols = c("SFA_mm","SFB_mm","SFC_mm", "SFD_mm", "TFB_mm", "TFD_mm") , names_to = "site",
values_to = "Cum_yield")
events <- readxl::read_excel(paste0(here, "/data/Book1.xlsx"))
tz(events$Start_dt_EST) #imported time zone is UTC
sapply(events, class)
r5_events <- events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
class(r5_events$datetime_interval_EST)
tz(r5_events$datetime_interval_EST) #timezone of interval gives an error
tz(r5_events$Start_dt_EST) #timezone of start is EST
#To check the interval is in EST, we can pull out the start
start <- int_start( r5_events$datetime_interval_EST[1])
class(start)
tz(start)
#create an empty dataframe with same headers
hobo_events <- slice(hobo_all, 0)
for (i in 1:length(r5_events$recession_n)) {
interval <- hobo_events_r5 %>%
filter(dt %within% r5_events$datetime_interval_EST[i]) %>%
mutate(recession_n = r5_events$recession_n[i])
hobo_events <- bind_rows(hobo_events, interval)
}
View(hobo_events)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(ggplot2)
library(scales)
hobo_all <- readRDS(paste0(here,"/output/hobo_compiled_wide.Rds"))%>%
pivot_longer(cols = c("SFA_mm","SFB_mm","SFC_mm", "SFD_mm", "TFB_mm", "TFD_mm") , names_to = "site",
values_to = "Cum_yield")
SFA_events <- readxl::read_excel(paste0(here, "/data/SFA.xlsx"))
tz(events$Start_dt_EST) #imported time zone is UTC
SFA_events2 <- SFA_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
View(SFA_events)
class(SFA_events2$datetime_interval_EST)
tz(SFA_events2$datetime_interval_EST) #timezone of interval gives an error
tz(SFA_events2$Start_dt_EST) #timezone of start is EST
#To check the interval is in EST, we can pull out the start
start <- int_start(SFA_events2$datetime_interval_EST[1])
class(start)
tz(start)
#create an empty dataframe with same headers
hobo_SFA_events <- slice(hobo_all, 0)
for (i in 1:length(SFA_events2$recession_n)) {
interval <- hobo_all %>%
filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
View(hobo_SFA_events)
View(hobo_all)
#create an empty dataframe with same headers
hobo_SFA_events <- slice(hobo_all, 0)
for (i in 1:length(SFA_events2$recession_n)) {
interval <-SFA_events2 %>%
filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
#create an empty dataframe with same headers
hobo_SFA_events <- slice(hobo_all, 0)
for (i in 1:length(SFA_events2$recession_n)) {
interval <-SFA_events %>%
filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
#create an empty dataframe with same headers
hobo_SFA_events <- slice(hobo_all, 0)
for (i in 1:length(SFA_events2$recession_n)) {
interval <- hobo_all %>%
filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
#create an empty dataframe with same headers
hobo_SFA_events <- slice(hobo_all, 0)
for (i in 1:length(SFA_events2$recession_n)) {
interval <- hobo_SFA_events %>%
filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
View(hobo_events)
#create an empty dataframe with same headers
hobo_SFA_events <- slice(hobo_events, 0)
for (i in 1:length(SFA_events2$recession_n)) {
interval <- hobo_events %>%
filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
View(hobo_SFA_events)
hobo_SFA <- hobo_events%>%
filter(site == "SFA_mm")
View(hobo_SFA)
#create an empty dataframe with same headers
hobo_SFA_events <- slice(hobo_events, 0)
for (i in 1:length(SFA_events2$recession_n)) {
interval <- hobo_SFA %>%
filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
View(hobo_SFA_events)
View(hobo_SFA)
View(hobo_SFA_events)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(ggplot2)
library(scales)
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
SFA <- hobo_events%>%
filter(site == "SFA_mm")
SFA_events <- readxl::read_excel(paste0(here, "/data/SFA.xlsx"))
tz(events$Start_dt_EST) #imported time zone is UTC
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
SFA <- hobo_events%>%
filter(site == "SFA_mm")
SFA_events <- readxl::read_excel(paste0(here, "/data/SFA.xlsx"))
tz(SFA_events$Start_dt_EST) #imported time zone is UTC
sapply(SFA_events, class)
SFA_events2 <- SFA_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
class(SFA_events2$datetime_interval_EST)
tz(SFA_events2$datetime_interval_EST) #timezone of interval gives an error
tz(SFA_events2$Start_dt_EST) #timezone of start is EST
#To check the interval is in EST, we can pull out the start
start <- int_start(SFA_events2$datetime_interval_EST[1])
class(start)
tz(start)
#create an empty dataframe with same headers
hobo_SFA_events <- slice(hobo_events, 0)
for (i in 1:length(SFA_events2$recession_n)) {
interval <- SFA %>%
filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
View(hobo_SFA_events)
#Check and correct timezone
tz(hobo_SFA_events $dt)
attr(hobo_SFA_events$dt, "tzone") <- "EST"
tz(hobo_SFA_events $dt)
#Now the hourly time series record is filtered with event numbers
#Check and correct timezone
tz(hobo_SFA_events $dt)
SFA_xts <- xts(hobo_SFA_events %>% select(dt, yield_mm), order.by=hobo_SFA_events$dt)
dygraph(SFA_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(ggplot2)
library(scales)
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
SFA <- hobo_events%>%
filter(site == "SFA_mm")
SFA_events <- readxl::read_excel(paste0(here, "/data/SFA.xlsx"))
tz(SFA_events$Start_dt_EST) #imported time zone is UTC
sapply(SFA_events, class)
SFA_events2 <- SFA_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
class(SFA_events2$datetime_interval_EST)
tz(SFA_events2$datetime_interval_EST) #timezone of interval gives an error
tz(SFA_events2$Start_dt_EST) #timezone of start is EST
#To check the interval is in EST, we can pull out the start
start <- int_start(SFA_events2$datetime_interval_EST[1])
class(start)
tz(start)
#create an empty dataframe with same headers
hobo_SFA_events <- slice(hobo_events, 0)
for (i in 1:length(SFA_events2$recession_n)) {
interval <- SFA %>%
filter(dt %within% SFA_events2$datetime_interval_EST[i]) %>%
mutate(recession_n = SFA_events2$recession_n[i])
hobo_SFA_events <- bind_rows(hobo_SFA_events, interval)
}
#Check and correct timezone
tz(hobo_SFA_events $dt)
attr(hobo_SFA_events$dt, "tzone") <- "EST"
tz(hobo_SFA_events $dt)
#Now the hourly time series record is filtered with event numbers
SFA_xts <- xts(hobo_SFA_events %>% select(dt, yield_mm), order.by=hobo_SFA_events$dt)
dygraph(SFA_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
# getApi(x, k = 0.9, n = 5, finite = TRUE)
