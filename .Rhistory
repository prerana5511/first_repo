#   group_by(month)%>%
#   nest()%>%
#   mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
#   mutate(data = map(data, ~summarise(.x, across(where(is.numeric), sum))))%>%
#   unnest_wider(data) %>%
#   ungroup()
#
# monthly_ppt_api <- monthly_ppt %>%
#   mutate(api_1m = getApi(W9_Precipitation_mm, k = 0.9, n=1, finite = TRUE),
#          api_inf = getApi(W9_Precipitation_mm, k = 0.9, finite = FALSE))
#
# sapply(monthly_ppt, class)
#Average Daily API per month
# Avg_API_daily<- monthly_ppt_api%>%
#   mutate(avg_api_1m_daily = api_1m/nobs)
#Filtering recession curves from raw hourly API
#KR- USE CUMULATIVE ST/TF records for this step, not API.
API_events <- slice(ppt_api, 0)
# for (i in 1:length(curve_intervals2$event_n)) {
#   interval <- ppt_api %>%
#     filter(datetime_EST2%within% curve_intervals2$datetime_interval_EST[i]) %>%
#     mutate(event_n = curve_intervals2$event_n[i])%>%
#     mutate(recession_n = curve_intervals2$recession_n[i])
#
#   API_events  <- bind_rows(API_events , interval)
# }
#
#
# ggplot(API_events) +
#   geom_line(mapping = aes(x=datetime_EST2, y=api_24hr)) +
#   geom_line(mapping = aes(x=datetime_EST2, y=api_10d), color = "blue") +
#   geom_line(mapping = aes(x=datetime_EST2, y=api_30d), color = "green") +
#   geom_line(mapping = aes(x=datetime_EST2, y=api_inf), color = "red")
#
#
# sapply(API_events, class)
#Log linear curves for 24hr, 10days, 30days and infinity API
hobo_events_new2 <- hobo_events_new %>%
mutate(time = as.numeric(dt))%>%
mutate(log_yield = log(yield_mm))
hobo_events_new2[c('log_yield')][sapply(hobo_events_new2[c('log_yield')], is.infinite)] <- NA
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
mutate(r = map_dbl(.x = data, .f = ~cor(y=(.x$log_yield), x = .x$time,
use = "na.or.complete")),
m = map_dbl(data, ~lm(log_yield~ time, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(log_yield ~ time, data = .)$coefficients[[1]]),
r2 = r^2)%>%
unnest(data)%>%
ungroup()%>%
mutate(cv = sd(m) / mean(m) * 100)%>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
ggplot(nested_hobo_events) + geom_jitter(mapping = aes(x=as.factor(hobo_event_n) , y= m, colour = site))
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n"))%>%
group_by(recession_n, dt_interval)%>%
mutate(event_dur_num = as.numeric(dt_interval),units="secs")%>% ##24hrs event
mutate(event_intensity = W9_Precipitation_mm/event_dur_num)
sapply(all_events, class)
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
# #Joining the cumulative hobo events and log linear curve data of APIs
# all_events<-inner_join(hobo_events_new2, nested_hobo_events,
#                     by = c( "recession_n", "log_yield", "time","dt","site","hobo_event_n","yield_mm"))
#Visualizing cumulative hobo yield per event and slope in log linear models
ggplot(all_events) +
geom_point(mapping = aes(x=dt, y= log(yield_mm), colour = recession_n)) +
geom_point(mapping = aes(x=dt, y=m), color = "green") +
geom_point(mapping = aes(x=dt, y=r), color = "blue")+
geom_point(mapping = aes(x=dt, y=i), color = "red")+
facet_wrap(~ hobo_event_n, scales = "free")
#Visualizing cumulative hobo yield per event and r in log linear models
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_point(mapping = aes(x=dt, y=yield_mm, colour = site)) +
# geom_point(mapping = aes(x=dt, y=m), color = "green") +
# geom_point(mapping = aes(x=dt, y=r), color = "blue")+
# geom_point(mapping = aes(x=dt, y=i), color = "red")+
facet_wrap(~ hobo_event_n, scales = "free")
#Visualizing cumulative hobo yield per event and intercepts in log linear models
ggplot(all_events) +
geom_point(mapping = aes(x=dt, y=log(yield_mm))) +
geom_point(mapping = aes(x=dt, y=i), color = "red")+
facet_wrap(~ hobo_event_n, scales = "free")
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
View(all_events)
hobo_norm<- all_events %>%
group_by(site)%>%
mutate(yield_norm = yield_mm + abs(min(yield_mm)))
View(hobo_norm)
all_events2<- all_events %>%
group_by(site)%>%
mutate(yield_norm = yield_mm + abs(min(yield_mm)))
View(all_events2)
library(patchwork)
install.packages("patchwork")
library(patchwork)
library(patchwork)
p1 <-ggplot(all_events2 %>% filter(str_detect(site, "TF"))) +
geom_bar(mapping = aes(x=event_dur_num , y= W9_Precipitation_mm, colour = site))
p1 <-ggplot(all_events2 %>% filter(str_detect(site, "TF"))) +
geom_bar(mapping = aes(x=event_dur_num , y= W9_Precipitation_mm, colour = site))
p1 <-ggplot(all_events2 %>% filter(str_detect(site, "TF"))) +
geom_bar(mapping = aes(x=event_dur_num , y= W9_Precipitation_mm, colour = site))
p1 <-ggplot(all_events2 %>% filter(str_detect(site, "TF"))) +
geom_bar(mapping = aes(x=event_dur_num , y= W9_Precipitation_mm, colour = site))
p2 <-ggplot(all_events2 %>% filter(str_detect(site, "TF"))) +
geom_bar(mapping = aes(x=event_dur_num , y= yield_morm, colour = site))
p1+p2
ggplot(all_events2 %>% filter(str_detect(site, "TF"))) +
geom_bar(mapping = aes(x=event_dur_num , y= W9_Precipitation_mm, colour = site))
ggplot(all_events2 %>% filter(str_detect(site, "TF"))) +
geom_bar(mapping = aes(x=date , y= W9_Precipitation_mm, colour = site))
ggplot(all_events2 %>% filter(str_detect(site, "TF"))) +
geom_bar(mapping = aes(x=time , y= W9_Precipitation_mm, colour = site))
ggplot(all_events2 %>% filter(str_detect(site, "TF")), mapping = aes(x=time , y= W9_Precipitation_mm, colour = site)) +
geom_bar(stat='identity')
ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x=event_dur_num , y= W9_Precipitation_mm, colour = site))+
geom_bar(stat='identity')
ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm, colour = site))+
geom_bar(stat='identity')
ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, colour = site))+
geom_bar(stat='identity')
p1 <- ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm, colour = site))+
geom_bar(stat='identity')
p2 <- ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, colour = site))+
geom_bar(stat='identity')
p1 + p2
p1 + p2+ plot_layout(nrow = 2, byrow = FALSE)
p1/p2
tf1 <- ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm, colour = site))+
geom_bar(stat='identity')
tf2 <- ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, colour = site))+
geom_bar(stat='identity')
tf1/tf2
sf1 <- ggplot(all_events2 %>% filter(!str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm, colour = site))+
geom_bar(stat='identity')
sf2 <- ggplot(all_events2 %>% filter(!str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, colour = site))+
geom_bar(stat='identity')
sf1/sf2
sf1 <- ggplot(all_events2 %>% filter(!str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm, fill = site))+
geom_bar(stat='identity')
sf2 <- ggplot(all_events2 %>% filter(!str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, fill = site))+
geom_bar(stat='identity')
sf1/sf2
tf1 <- ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm, fill = site))+
geom_bar(stat='identity')
tf2 <- ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, fill = site))+
geom_bar(stat='identity')
tf1/tf2
sf1 <- ggplot(all_events2 %>% filter(!str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm, fill = site))+
geom_bar(stat='identity')
sf2 <- ggplot(all_events2 %>% filter(!str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, fill = site))+
geom_bar(stat='identity')
sf1/sf2
tf1 <- ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm))+
geom_bar(stat='identity')
tf2 <- ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, fill = site))+
geom_bar(stat='identity')
tf1/tf2
sf1 <- ggplot(all_events2 %>% filter(!str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm))+
geom_bar(stat='identity')
sf2 <- ggplot(all_events2 %>% filter(!str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, fill = site))+
geom_bar(stat='identity')
sf1/sf2
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
library(patchwork)
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
#to avoid weird issues with Excel formating, use csv for importing.
#Example csv I created quickly
curve_intervals <- read_csv(paste0(here, "/data/hobo_new_utf.csv"))
tz(curve_intervals$Start_dt_EST)
curve_intervals2 <- curve_intervals %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
# tz(curve_intervals2$datetime_interval_EST)
sapply(curve_intervals2, class)
#edit site ids to match
hobo_events2 <- hobo_events %>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B",
site == "SFC_mm" ~ "SF-C",
site == "SFD_mm" ~ "SF-D",
site == "TFB_mm" ~ "TF-B",
site == "TFD_mm" ~ "TF-D"))
#get list of site names to loop through
sites <- unique(curve_intervals2$site)
#create an empty dataframe with same headers
hobo_events_new <- slice(hobo_events2, 0)
#create a double loop to loop through sites and through curve intervals within each site
for(i in sites) {
ts <- hobo_events2 %>% filter(site == i) #filter time series
int <- curve_intervals2 %>% filter(site == i) #filter interval list
for (j in 1:length(int$recession_n)) {
interval <- ts %>%
filter(dt %within% int$datetime_interval_EST[j]) %>%
mutate(recession_n = int$recession_n[j])
hobo_events_new <- bind_rows(hobo_events_new, interval)
}
}
rm(ts, int, interval)
#Check and correct timezone
tz(hobo_events_new$dt)
xts <- xts(hobo_events_new %>% select(dt, yield_mm), order.by=hobo_events_new$dt)
dygraph(xts) %>% #dyAxis("y", valueRange = c(-1, 1)) %>%
# dyOptions(connectSeparatedPoints = FALSE)%>%
dygraphs::dyOptions(drawPoints = T, strokeWidth = 0, pointSize = 5)%>%
dyRangeSelector()
#Testing the antecedent precipitation index function
#load and format precipitation data
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv")) %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
filter(minute(datetime_EST2) == 0) %>% #remove subhourly timestamps
select(-W9_Streamflow_mm_hr) %>%
arrange(datetime_EST2) #Order from earliest to latest timestamp
#load API function
source(paste0(here, "/src/API.R"))
ppt_api <- ppt %>%
arrange(datetime_EST2) %>%
mutate(api_24hr = getApi(W9_Precipitation_mm, k = 0.9, n = 24, finite = TRUE),
api_10d = getApi(W9_Precipitation_mm, k = 0.9, n = 24*10, finite = TRUE),
api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 24*30, finite = TRUE),
api_inf = getApi(W9_Precipitation_mm, k = 0.9, finite = FALSE))%>%
select(-datetime_EST)
ggplot(ppt_api) +
geom_line(mapping = aes(x=datetime_EST2, y=api_24hr)) +
geom_line(mapping = aes(x=datetime_EST2, y=api_10d), color = "blue") +
geom_line(mapping = aes(x=datetime_EST2, y=api_30d), color = "green") +
geom_line(mapping = aes(x=datetime_EST2, y=api_inf), color = "red")
#Daily API
ppt_daily <- ppt %>%
mutate(date = as.Date(datetime_EST2)) %>%
group_by(date)%>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
mutate(data = map(data, ~summarise(.x, across(where(is.numeric), sum))))%>%
unnest_wider(data) %>%
ungroup()%>%
mutate(date = as.POSIXct(date))
sapply(ppt_daily, class)
ppt_daily_api <- ppt_daily %>%
arrange(date) %>%
mutate(api_1d = getApi(W9_Precipitation_mm, k = 0.9, n=1, finite = TRUE),
api_10d = getApi(W9_Precipitation_mm, k = 0.9, n = 10, finite = TRUE),
api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 30, finite = TRUE),
api_inf = getApi(W9_Precipitation_mm, k = 0.9, finite = FALSE),
dt_start = force_tz(as_datetime(date), "EST"),
dt_end = force_tz(as_datetime(date) + hours(23) + minutes(59) + seconds(59),
"EST"),
dt_interval = interval(dt_start, dt_end))
ggplot(ppt_daily_api) +
geom_line(mapping = aes(x=date, y=api_1d)) +
geom_line(mapping = aes(x=date, y=api_10d), color = "blue") +
geom_line(mapping = aes(x=date, y=api_30d), color = "green") +
geom_line(mapping = aes(x=date, y=api_inf), color = "red")
#Filtering daily API events
ppt_daily_api_events <- slice(ppt_daily_api, 0)
for (i in 1:length(curve_intervals2$event_n)) {
interval <- ppt_daily_api %>%
filter(curve_intervals2$datetime_interval_EST[i] %within% dt_interval) %>%
mutate(event_n = curve_intervals2$event_n[i]) %>%
mutate(recession_n = curve_intervals2$recession_n[i])
ppt_daily_api_events  <- bind_rows(ppt_daily_api_events, interval)
}
ppt_daily_api_events2 <- ppt_daily_api_events %>%
distinct(event_n, .keep_all = TRUE) %>%
select(c(event_n, contains("api")))
#Log linear curves for 24hr, 10days, 30days and infinity API
hobo_events_new2 <- hobo_events_new %>%
mutate(time = as.numeric(dt))%>%
mutate(log_yield = log(yield_mm))
View(hobo_events_new2)
hobo_events_new2[c('log_yield')][sapply(hobo_events_new2[c('log_yield')], is.infinite)] <- NA
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
mutate(r = map_dbl(.x = data, .f = ~cor(y=(.x$log_yield), x = .x$time,
use = "na.or.complete")),
m = map_dbl(data, ~lm(log_yield~ time, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(log_yield ~ time, data = .)$coefficients[[1]]),
r2 = r^2)%>%
unnest(data)%>%
ungroup()%>%
mutate(cv = sd(m) / mean(m) * 100)%>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
ggplot(nested_hobo_events) + geom_jitter(mapping = aes(x=as.factor(hobo_event_n) , y= m, colour = site))
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n"))%>%
group_by(recession_n, dt_interval)%>%
mutate(event_dur_num = as.numeric(dt_interval),units="secs")%>% ##24hrs event
mutate(event_intensity = W9_Precipitation_mm/event_dur_num)
sapply(all_events, class)
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
mutate(r = map_dbl(.x = data, .f = ~cor(y=(.x$log_yield), x = .x$time,
use = "na.or.complete")),
m = map_dbl(data, ~lm(log_yield~ time, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(log_yield ~ time, data = .)$coefficients[[1]]),
r2 = r^2,
cv = sd(m) / mean(m) * 100) %>%
unnest(data)%>%
ungroup()%>%
# mutate(cv = sd(m) / mean(m) * 100)%>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
ggplot(nested_hobo_events) + geom_jitter(mapping = aes(x=as.factor(hobo_event_n) , y= m, colour = site))
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n"))%>%
group_by(recession_n, dt_interval)%>%
mutate(event_dur_num = as.numeric(dt_interval),units="secs")%>% ##24hrs event
mutate(event_intensity = W9_Precipitation_mm/event_dur_num)
sapply(all_events, class)
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
View(hobo_events)
View(nested_hobo_events)
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
mutate(r = map_dbl(.x = data, .f = ~cor(y=(.x$log_yield), x = .x$time,
use = "na.or.complete")),
m = map_dbl(data, ~lm(log_yield~ time, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(log_yield ~ time, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data)%>%
ungroup()
View(nested_hobo_events)
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
mutate(r = map_dbl(.x = data, .f = ~cor(y=(.x$log_yield), x = .x$time,
use = "na.or.complete")),
m = map_dbl(data, ~lm(log_yield~ time, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(log_yield ~ time, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data)%>%
ungroup() %>%
mutate(cv = sd(m) / mean(m) * 100)
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
mutate(r = map_dbl(.x = data, .f = ~cor(y=(.x$log_yield), x = .x$time,
use = "na.or.complete")),
m = map_dbl(data, ~lm(log_yield~ time, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(log_yield ~ time, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data)%>%
ungroup() %>%
# mutate(cv = sd(m) / mean(m) * 100) %>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
ggplot(nested_hobo_events) + geom_jitter(mapping = aes(x=as.factor(hobo_event_n) , y= m, colour = site))
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n"))
View(all_events)
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n")) %>%
group_by(recession_n, dt_interval)%>%
mutate(event_dur_num = as.numeric(dt_interval),units="secs")%>% ##24hrs event
mutate(event_intensity = W9_Precipitation_mm/event_dur_num) %>%
ungroup() %>%
group_by(event_n) %>%
mutate(cv = sd(m) / mean(m) * 100) #cv is same for all
View(all_events)
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n")) %>%
group_by(recession_n, dt_interval)%>%
mutate(event_dur_num = as.numeric(dt_interval),units="secs")%>% ##24hrs event
mutate(event_intensity = W9_Precipitation_mm/event_dur_num) %>%
ungroup() %>%
group_by(event_n) %>%
mutate(cv = sd(m) / mean(m) * 100) %>%
ungroup()
sapply(all_events, class)
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_10d, colour = site))
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_30d, colour = site))
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_inf, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_10d, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_30d, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_inf, colour = site))
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
all_events2<- all_events %>%
group_by(site)%>%
mutate(yield_norm = yield_mm + abs(min(yield_mm)))
tf1 <- ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm))+
geom_bar(stat='identity')
tf2 <- ggplot(all_events2 %>% filter(str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, fill = site))+
geom_bar(stat='identity')
tf1/tf2
sf1 <- ggplot(all_events2 %>% filter(!str_detect(site, "TF")),
mapping = aes(x= date , y= W9_Precipitation_mm))+
geom_bar(stat='identity')
sf2 <- ggplot(all_events2 %>% filter(!str_detect(site, "TF")),
mapping = aes(x= date , y= yield_norm, fill = site))+
geom_bar(stat='identity')
sf1/sf2
View(all_events2)
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_10d, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_30d, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_inf, colour = site))
ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_30d, colour = site))
View(all_events)
View(getApi)
p1 <- tf1/tf2
ggsave(p1, paste0(here, "/output/figs/tf.png"))
ggsave(p1, paste0(here, "/output/figs/tf.png"))
paste0(here, "/output/figs/tf.png"
paste0(here, "/output/figs/tf.png")
p1
ggsave(p1, paste0(here, "/output/figs/tf.png"))
ggsave(plot = p1, path = paste0(here, "/output/figs/tf.png"))
ggsave(filename = "tf", plot = p1, path = paste0(here, "/output/figs/tf.png"))
ggsave(filename = "tf", plot = p1, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "tf.png", plot = p1, path = paste0(here, "/output/figs/"),
device = "png")
p2 <- sf1/sf2
ggsave(filename = "sf.png", plot = p2, path = paste0(here, "/output/figs/"),
device = "png")
