yield_mm = vol_mm3/const$val[["SFA_CA_mm2"]])  #conversion factor of trough area from Excel sheet
hobo_SFA_2 <- hobo_SFA %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm = vol_mm3/const$val[["SF_A_CA_mm2"]])  #conversion factor of trough area from Excel sheet
View(hobo_SFA_2)
#plot checks
plot(hobo_SFA_2$yield_mm ~ hobo_SFA_2$dt)
#save imported hobo record
saveRDS(hobo_SFA_2, paste0(here, "/output/hobo/hobo_sfa_imported.Rds"))
write_csv(hobo_SFA_2, paste0(here,                      "/output/hobo/hobo_sfa_imported.csv"))
rm(hobo_SFA, hobo_SFA_2)
#load hobo yield record
hobo_SFA <- readRDS(paste0(here, "/output/hobo/hobo_sfa_imported.Rds")) %>%
select(dt, yield_mm_hobo)
#load hobo yield record
hobo_SFA <- readRDS(paste0(here, "/output/hobo/hobo_sfa_imported.Rds")) %>%
select(dt, yield_mm)
View(hobo_SFA)
rm(hobo_SFA, hobo_SFA_2)
hobo_SFA_2 <- readRDS(paste0(here, "/output/hobo/hobo_sfa_imported.Rds"))
View(hobo_SFA_2)
hobo_SFA <- readRDS(paste0(here, "/output/hobo/hobo_sfa_imported.Rds"))
#create datetime character for input to matlab
SFA_ml <- scan_tree_ppt %>%
arrange(dt) %>%
mutate(datetime = as.character(dt),
hobo_yield_mm = case_when(yield_mm_hobo < 0 ~ 0,
TRUE ~ yield_mm_hobo)) %>%
select(datetime, yield_mm_hobo) %>%
drop_na()
#Load import function
source(paste0(here, "/src/hobo_import.R"))
#Load a table of constants to use in calculations below
const <- readRDS(paste0(here,"/data/TF_SF_const.Rds"))
#SF-A-----
#get file paths for TF-A1
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/SF-A/"))
#row bind results of import function
hobo_SFA <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_SFA_2 <- hobo_SFA %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_A_CA_mm2"]])  #water yield normalized to tree canopy area
#plot checks
plot(hobo_SFA_2$yield_mm_hobo ~ hobo_SFA_2$dt)
#save imported hobo record
saveRDS(hobo_SFA_2, paste0(here, "/output/hobo/hobo_sfa_imported.Rds"))
write_csv(hobo_SFA_2, paste0(here,                      "/output/hobo/hobo_sfa_imported.csv"))
rm(hobo_SFA, hobo_SFA_2)
#Load hobo record
hobo_SFA <- readRDS(paste0(here, "/output/hobo/hobo_sfa_imported.Rds"))
#create datetime character for input to matlab
hobo_SFA_ml <- hobo_SFA %>%
arrange(dt) %>%
mutate(datetime = as.character(dt),
hobo_yield_mm = case_when(yield_mm_hobo < 0 ~ 0,
TRUE ~ yield_mm_hobo)) %>%
select(datetime, yield_mm_hobo) %>%
drop_na()
sum(duplicated(hobo_SFA_ml$datetime))
#Save file for input to matlab correction script
saveRDS(hobo_SFA_ml,
paste0(here,"/data/hobo/forMatlab/hobo_SFA_ml.Rds"))
write_csv(hobo_SFA_ml,
paste0(here,"/data/hobo/forMatlab/SF-A/hobo_SFA_ml.csv"))
#Load import function
source(paste0(here, "/src/hobo_import.R"))
#Load a table of constants to use in calculations below
const <- readRDS(paste0(here,"/data/TF_SF_const.Rds"))
#SF-A-----
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/SF-A/"))
#SF-A-----
site <- "SF-A"
#SF-A-----
site <- "SF-A"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_A_CA_mm2"]])  #water yield normalized to tree canopy area
#SF-A-----
site <- "SF-A"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_A_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/", site))
dir_create(paste0(here, "/output/hobo/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/", site, ".Rds"))
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/", site, ".Rds"))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/", site, ".Rds"))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
here <- here()
#Load import function
source(paste0(here, "/src/hobo_import.R"))
#Load a table of constants to use in calculations below
const <- readRDS(paste0(here,"/data/TF_SF_const.Rds"))
#SF-A-----
site <- "SF-A"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_A_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2)
rm(hobo, hobo_2, site)
rm(hobo, hobo_2, site, paths)
#SF-B-----
site <- "SF-B"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_B_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
#Load hobo record
site <- "SF-A"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
View(hobo)
#create datetime character for input to matlab
hobo_ml <- hobo %>%
arrange(dt) %>%
mutate(datetime = as.character(dt),
hobo_yield_mm = case_when(yield_mm_hobo < 0 ~ 0,
TRUE ~ yield_mm_hobo)) %>%
select(datetime, yield_mm_hobo) %>%
drop_na()
sum(duplicated(hobo_ml$datetime))
#Load hobo record
site <- "SF-A"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
#create datetime character for input to matlab
hobo_ml <- hobo %>%
arrange(dt) %>%
mutate(datetime = as.character(dt),
hobo_yield_mm = case_when(yield_mm_hobo < 0 ~ 0,
TRUE ~ yield_mm_hobo)) %>%
select(datetime, yield_mm_hobo) %>%
drop_na()
sum(duplicated(hobo_ml$datetime))
#Save file for input to matlab correction script
saveRDS(hobo_ml,
paste0(here,"/data/hobo/forMatlab/", site, "/hobo_", site,
"_ml.Rds"))
saveRDS(hobo_ml,
paste0(here,"/data/hobo/forMatlab/", site, "/hobo_", site,
"_ml.csv"))
rm(site, hobo, hobo_ml)
#Load hobo record
site <- "SF-A"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
#create datetime character for input to matlab
hobo_ml <- hobo %>%
arrange(dt) %>%
mutate(datetime = as.character(dt),
hobo_yield_mm = case_when(yield_mm_hobo < 0 ~ 0,
TRUE ~ yield_mm_hobo)) %>%
select(datetime, yield_mm_hobo) %>%
drop_na()
sum(duplicated(hobo_ml$datetime))
dir_create(paste0(here, "/data/hobo/forMatlab/", site))
#Save file for input to matlab correction script
saveRDS(hobo_ml,
paste0(here,"/data/hobo/forMatlab/", site, "/hobo_", site,
"_ml.Rds"))
saveRDS(hobo_ml,
paste0(here,"/data/hobo/forMatlab/", site, "/hobo_", site,
"_ml.csv"))
rm(site, hobo, hobo_ml)
#SF-B -----
#Load hobo record
site <- "SF-B"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
#create datetime character for input to matlab
hobo_ml <- hobo %>%
arrange(dt) %>%
mutate(datetime = as.character(dt),
hobo_yield_mm = case_when(yield_mm_hobo < 0 ~ 0,
TRUE ~ yield_mm_hobo)) %>%
select(datetime, yield_mm_hobo) %>%
drop_na()
sum(duplicated(hobo_ml$datetime))
dir_create(paste0(here, "/data/hobo/forMatlab/", site))
#Save file for input to matlab correction script
saveRDS(hobo_ml,
paste0(here,"/data/hobo/forMatlab/", site, "/hobo_", site,
"_ml.Rds"))
saveRDS(hobo_ml,
paste0(here,"/data/hobo/forMatlab/", site, "/hobo_", site,
"_ml.csv"))
rm(site, hobo, hobo_ml)
#0.0 Setup ----
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
here <- here() #create a filepath object named "here" to use later
library(lubridate) #lubridate needs to be loaded separately
#1.0 Load and Clean Data ----
# adding 4 dashes "----" creates a collapsible code chunk
# specify packages using "::" in bewteen package name and function
events <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
#use dplyr::glimpse to browse data
glimpse(events)
glimpse(ppt)
#identifying class
sapply(events, class)
sapply(ppt, class)
#Check the format of the interval column
#"base" refers to the base R packages that come with R
base::class(events$datetime_interval_EST) #loaded as a character string
lubridate::is.interval(events$datetime_interval_EST)
##1.1 Define the interval using start and end times----
events2 <- events %>%
mutate(.after = datetime_end_GMT, #indicates where the new column is placed
datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT,
tz = "EST"))
View(events2)
class(events2$datetime_interval_EST2)
tz(events2$datetime_interval_EST2) #timezone of interval gives an error
tz(events2$datetime_start_GMT) #timezone of start is UTC/GMT
view(events2) #check the new intervals match the character intervals
class(events2$datetime_interval_EST2)
tz(events2$datetime_interval_EST2) #timezone of interval gives an error
tz(events2$datetime_start_GMT) #timezone of start is UTC/GMT
#To check the interval is in EST, we can pull out the start
start <- int_start(events2$datetime_interval_EST2[1])
class(start)
tz(start)
#Now you should have an set of intervals to use for filtering
intervals <- events2 %>%
distinct(datetime_interval_EST2, .keep_all = TRUE) %>%
select(Event_Number, datetime_interval_EST2) %>%
mutate(event_dur_sec = dseconds(datetime_interval_EST2),
event_dur_s = as.numeric(intervals$event_dur_sec))
intervals <- events2 %>%
distinct(datetime_interval_EST2, .keep_all = TRUE)
View(intervals)
intervals <- events2 %>%
distinct(datetime_interval_EST2, .keep_all = TRUE) %>%
select(Event_Number, datetime_interval_EST2)
intervals <- events2 %>%
distinct(datetime_interval_EST2, .keep_all = TRUE) %>%
select(Event_Number, datetime_interval_EST2) %>%
mutate(event_dur_sec = dseconds(datetime_interval_EST2),
event_dur_s = as.numeric(intervals$event_dur_sec))
#Now you should have an set of intervals to use for filtering
intervals <- events2 %>%
distinct(datetime_interval_EST2, .keep_all = TRUE) %>%
select(Event_Number, datetime_interval_EST2) %>%
mutate(event_dur_sec = dseconds(datetime_interval_EST2))
View(intervals)
##1.2 Assign event numbers/filter ppt time series based on event intervals ----
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
filter(minute(datetime_EST2) == 0) %>% #remove subhourly timestamps
select(-W9_Streamflow_mm_hr) %>%
arrange(datetime_EST2) #Order from earliest to latest timestamp
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(Event_Number = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
options(dplyr.summarise.inform = TRUE) #I like to see the feedback
#I try to avoid overwriting objects with the same name
#It helps with troubleshooting and you can always remove old objects
events_summary <- ppt_events %>%
group_by(Event_Number) %>%
dplyr::summarise(P_event_mm = sum(W9_Precipitation_mm),
P_max_event_mm_hr = max(W9_Precipitation_mm, na.rm = TRUE),
P_mean_event_mm_hr = mean(W9_Precipitation_mm, na.rm = TRUE))%>%
left_join(intervals, ., by = "Event_Number")
View(events_summary)
View(ppt_events)
ppt_dt <-  ppt_events %>%
# left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~ datetime_EST2),
Time_taken_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
event_dur_sec))
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number)
View(ppt_dt)
View(ppt_dt)
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_mm_hr_event_max == W9basin_mm_hr_corr ~
W9_Precipitation_mm/P_event_mm))
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9basin_mm_hr_corr ~
W9_Precipitation_mm/P_event_mm))
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm))
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm)) %>%
distinct(Event_Number, .keep_all = TRUE)
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm)) %>%
distinct(Event_Number, dt_P_mm_hr_event_max, fract_max_P_event)
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm)) %>%
distinct(Event_Number, dt_P_mm_hr_event_max, fract_max_P_event) %>%
drop_na() %>%
dplyr::ungroup() %>%
left_join(events_summary, ., by = "Event_Number")
diff(1:10, 2)
diff(1:10, 2, 2)
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number)
View(ppt_dt)
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm),
seconds_to_max_P = dseconds(start = int_start(datetime_EST2),
end = dt_P_mm_hr_event_max))
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm)) %>%
distinct(Event_Number, dt_P_mm_hr_event_max, fract_max_P_event) %>%
drop_na() %>%
dplyr::ungroup() %>%
left_join(events_summary, ., by = "Event_Number") %>%
mutate(seconds_to_max_P = dseconds(start = int_start(datetime_EST2),
end = dt_P_mm_hr_event_max))
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm)) %>%
distinct(Event_Number, dt_P_mm_hr_event_max, fract_max_P_event) %>%
drop_na() %>%
dplyr::ungroup() %>%
left_join(events_summary, ., by = "Event_Number") %>%
mutate(seconds_to_max_P = dseconds(interval(start = int_start(datetime_EST2),
end = dt_P_mm_hr_event_max)))
View(ppt_events)
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number")
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm),
seconds_to_max_P = dseconds(interval(start = int_start(datetime_EST2),
end = dt_P_mm_hr_event_max)))
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm),
seconds_to_max_P = dseconds(interval(start = int_start(datetime_interval_EST2),
end = dt_P_mm_hr_event_max)))
View(ppt_dt)
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm),
seconds_to_max_P = dseconds(interval(start = int_start(datetime_interval_EST2),
end = dt_P_mm_hr_event_max))) %>%
distinct(Event_Number, .keep_all = TRUE)
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm),
seconds_to_max_P = dseconds(interval(start = int_start(datetime_interval_EST2),
end = dt_P_mm_hr_event_max))) %>%
distinct(Event_Number, dt_P_mm_hr_event_max, fract_max_P_event,
seconds_to_max_P)
ppt_dt <-  ppt_events %>%
left_join(events_summary, .,  by = "Event_Number") %>%
group_by(Event_Number) %>%
# filter(W9_Precipitation_mm != 0 )%>%
mutate(dt_P_mm_hr_event_max = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
datetime_EST2),
fract_max_P_event = case_when(P_max_event_mm_hr == W9_Precipitation_mm ~
W9_Precipitation_mm/P_event_mm),
seconds_to_max_P = dseconds(interval(start = int_start(datetime_interval_EST2),
end = dt_P_mm_hr_event_max))) %>%
distinct(Event_Number, dt_P_mm_hr_event_max, fract_max_P_event,
seconds_to_max_P) %>%
drop_na() %>%
dplyr::ungroup() %>%
left_join(events_summary, ., by = "Event_Number")
