mutate(sec = seconds(dt) - min(seconds(dt)),
sec_norm = sec/max(sec),
yld_mm_norm1 = yield_mm - min(yield_mm),
yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1),
power_yield = 10^yld_mm_norm2)%>%
ungroup()%>%
distinct(across(power_yield), .keep_all = TRUE)%>%
drop_na()
View(hobo_rec_events)
#linear models for recession n
nested_rec_events <- rec_norm %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data) %>%
ungroup()%>%
distinct(across(recession_n), .keep_all = TRUE)
View(nested_rec_events)
#Saving rec models
saveRDS(nested_rec_events, paste0(here, "/output/rec_model.Rds"))
write_csv(nested_rec_events,
paste0(here,"/output/rec_model.csv"))
#Recession curve model coefficients
model_rec_events <- rec_norm %>%
dplyr::group_by(recession_n)%>%
nest() %>%
mutate(m1 = purrr::map(.x = data, .f = ~ lm(power_yield~ sec_norm, data = .)),
glance = map(.x = m1, .f = ~broom::glance(.x)),
preds = map(m1, broom::augment),
r = map_dbl(.x = data, .f = ~cor(.x$power_yield, .x$sec_norm, use="complete.obs")),
RMSE = map_dbl(preds, .f = ~sqrt(mean(.x$.resid^2)))) %>%
unnest(preds)%>%
ungroup()
ggplot(model_rec_events) +
geom_line(mapping = aes(x=sec_norm, y=.fitted, colour = recession_n))
facet_wrap(~ hobo_event_n, scales = "free")
View(model_rec_events)
View(model_rec_events)
View(nested_rec_events)
View(model_rec_events)
View(nested_rec_events)
View(hobo_rec_events)
View(hobo_events)
View(hobo_rec_events)
View(model_rec_events)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(scales)
library(patchwork)
#HOBO EVENT CURVES
#Import hobo events
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
#Normalize hobo and process events for event summary in r10_fig4 script
event_norm <- hobo_events%>%
group_by(hobo_event_n)%>%
mutate(sec = seconds(dt) - min(seconds(dt)),
sec_norm = sec/max(sec),
yld_mm_norm1 = yield_mm - min(yield_mm),
yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1),
power_yield = 10^yld_mm_norm2)%>%
ungroup()%>%
distinct(across(power_yield), .keep_all = TRUE)%>%
drop_na()
#linear models for hobo events
nested_events <- event_norm %>%
drop_na()%>%
select(-site, -site2)%>%
group_by(hobo_event_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data) %>%
ungroup()%>%
distinct(across(hobo_event_n), .keep_all = TRUE)
#Save event models for r10 script
saveRDS(nested_events, paste0(here, "/output/event_model.Rds"))
write_csv(nested_events,
paste0(here,"/output/event_model.csv"))
#RECESSION CURVES
#Import recession curve values
hobo_rec_events <- readRDS(paste0(here, "/output/rec_values.Rds"))
#Normalizing rec values since hobo values normalization will give different
#values from rec values normalization and we need both
rec_norm <- hobo_rec_events%>%
group_by(recession_n)%>%
mutate(sec = seconds(dt) - min(seconds(dt)),
sec_norm = sec/max(sec),
yld_mm_norm1 = yield_mm - min(yield_mm),
yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1),
power_yield = 10^yld_mm_norm2)%>%
ungroup()%>%
distinct(across(power_yield), .keep_all = TRUE)%>%
drop_na()
#linear models for recession n
nested_rec_events <- rec_norm %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data) %>%
ungroup()%>%
distinct(across(recession_n), .keep_all = TRUE)
#Saving rec models
saveRDS(nested_rec_events, paste0(here, "/output/rec_model.Rds"))
write_csv(nested_rec_events,
paste0(here,"/output/rec_model.csv"))
#Recession curve model coefficients
model_rec_events <- rec_norm %>%
dplyr::group_by(recession_n)%>%
nest() %>%
mutate(m1 = purrr::map(.x = data, .f = ~ lm(power_yield~ sec_norm, data = .)),
glance = map(.x = m1, .f = ~broom::glance(.x)),
preds = map(m1, broom::augment),
r = map_dbl(.x = data, .f = ~cor(.x$power_yield, .x$sec_norm, use="complete.obs")),
RMSE = map_dbl(preds, .f = ~sqrt(mean(.x$.resid^2)))) %>%
unnest(preds)%>%
ungroup()
ggplot(model_rec_events) +
geom_line(mapping = aes(x=sec_norm, y=.fitted, colour = recession_n))
facet_wrap(~ hobo_event_n, scales = "free")
#Assigning hobo events number, species as sites and converting he fitted prediction to rate
rate_convertion <-full_join(model_rec_events, hobo_rec_events,
by = c( "recession_n"))
View(rate_convertion)
rate_convertion <-full_join(model_rec_events, hobo_rec_events,
by = c( "recession_n")) %>%
distinct(across(r), .keep_all = TRUE)
View(model_rec_events)
rate_convertion <-full_join(model_rec_events, hobo_rec_events,
by = c( "recession_n")) %>%
distinct(across(.fitted), .keep_all = TRUE)
View(rate_convertion)
rate_convertion <-full_join(model_rec_events, hobo_rec_events,
by = c( "recession_n")) %>%
distinct(across(.fitted), .keep_all = TRUE) %>%
dplyr::group_by(recession_n) %>%
mutate(rate_yld = .fitted - lag(.fitted)) %>%
ungroup()
ggplot(rate_convertion) +
geom_col(mapping = aes(x=sec_norm, y=rate_yld,colour = site))+
facet_wrap(~ hobo_event_n, scales = "free")
ggplot(rate_convertion) +
geom_point(mapping = aes(x=sec_norm, y=.fitted, colour = site),
size = 3.5)+
facet_wrap(~ hobo_event_n, scales = "free") +
theme_bw()
ggplot(rate_convertion) +
geom_col(mapping = aes(x=sec_norm, y=rate_yld,colour = site2))+
facet_wrap(~ hobo_event_n, scales = "free")
#Plotting normalized time vs yield rate with points
ggplot(rate_convertion) +
geom_point(mapping = aes(x=sec_norm, y=.fitted, colour = site2),
size = 3.5)+
facet_wrap(~ hobo_event_n, scales = "free") +
theme_bw()
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(scales)
library(patchwork)
library(broom)
#Import ppt events
ppt_events <-readRDS(paste0(here,"/output/ppt_events_with_API.Rds"))%>%
select(Event, datetime_EST2, W9_Precipitation_mm)%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST')))
#Check timezone
tz(ppt_events$datetime_EST2)
#Import recession values
rec_values <- readRDS(paste0(here, "/output/rec_values.Rds"))%>%
rename("rec_yield" = "yield_mm")
#Import recession intervals
rec_intervals <- readRDS(paste0(here, "/output/curve_intervals.Rds"))%>%
select(-notes)%>%
rename("hobo_event_n" = "event_n")%>%
drop_na()
View(rec_intervals)
View(rec_intervals)
#Import recession models and coefficients
rec_model <- readRDS(paste0(here, "/output/rec_model.Rds"))%>%
select(recession_n, hobo_event_n, site, i, m)
#Merging recession values and intervals
merged_rec <- full_join(rec_values, rec_intervals,
by = c( "recession_n", "hobo_event_n", "site"))
#Storing the cumulative ppt that is just above the midpoint of the total ppt
centroid1<-ppt_events %>%
drop_na %>%
group_by(Event) %>%
arrange(datetime_EST2) %>%
mutate(midpoint = sum(W9_Precipitation_mm)/2) %>%
mutate(cum_ppt = cumsum(W9_Precipitation_mm)) %>%
filter(cum_ppt > midpoint) %>%
mutate(centroid1 = min(cum_ppt)) %>%
filter(cum_ppt == centroid1)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
library(broom)
#Import table containing API values
api_table <- readRDS(paste0(here, "/output/table1.Rds"))%>%
rename("hobo_event_n" = "Event")
#Import recession event statistics
rec_table <- readRDS(paste0(here, "/output/table2.Rds"))
#Import table of hobo events model coefficients
event_table <- readRDS(paste0(here, "/output/event_model.Rds"))
#Merging API and hobo events
merged_event_table <- full_join(api_table, event_table,
by = c( "hobo_event_n"))%>%
select(hobo_event_n, api_30d, event_intensity, m)
#Merging API and rec events
merged_rec_table <- full_join(api_table, rec_table,
by = c( "hobo_event_n"))
View(merged_rec_table)
View(rec_table)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(scales)
library(patchwork)
library(broom)
#Import ppt events
ppt_events <-readRDS(paste0(here,"/output/ppt_events_with_API.Rds"))%>%
select(Event, datetime_EST2, W9_Precipitation_mm)%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST')))
#Check timezone
tz(ppt_events$datetime_EST2)
#Import recession values
rec_values <- readRDS(paste0(here, "/output/rec_values.Rds"))%>%
rename("rec_yield" = "yield_mm")
#Import recession intervals
rec_intervals <- readRDS(paste0(here, "/output/curve_intervals.Rds"))%>%
select(-notes)%>%
rename("hobo_event_n" = "event_n")%>%
drop_na()
#Import recession models and coefficients
rec_model <- readRDS(paste0(here, "/output/rec_model.Rds"))%>%
select(recession_n, hobo_event_n, site, i, m)
#Merging recession values and intervals
merged_rec <- full_join(rec_values, rec_intervals,
by = c( "recession_n", "hobo_event_n", "site"))
#Storing the cumulative ppt that is just above the midpoint of the total ppt
centroid1<-ppt_events %>%
drop_na %>%
group_by(Event) %>%
arrange(datetime_EST2) %>%
mutate(midpoint = sum(W9_Precipitation_mm)/2) %>%
mutate(cum_ppt = cumsum(W9_Precipitation_mm)) %>%
filter(cum_ppt > midpoint) %>%
mutate(centroid1 = min(cum_ppt)) %>%
filter(cum_ppt == centroid1)
#Storing the cumulative ppt that is just below the midpoint of the total ppt
centroid2<-ppt_events %>%
drop_na%>%
group_by(Event)%>%
mutate(midpoint = sum(W9_Precipitation_mm)/2)%>%
mutate(cum_ppt = cumsum(W9_Precipitation_mm))%>%
filter(cum_ppt < midpoint)%>%
mutate(centroid2 = max(cum_ppt))%>%
filter(cum_ppt == centroid2)
#storing centroid as the median of the cumulative ppt values just below and
#above the midpoint of the total ppt
centroid <- full_join(centroid1, centroid2,
by = c( "Event", "cum_ppt", "datetime_EST2", "midpoint",
"W9_Precipitation_mm"))%>%
group_by(Event)%>%
mutate(centroid = median(datetime_EST2)) %>%
rename("hobo_event_n" = "Event")%>%
ungroup()
#Calculating DeltaT as the time between centroid of ppt and start of recession curves
DeltaT <- inner_join(merged_rec , centroid,
by = c("hobo_event_n")) %>%
mutate(Delta_T = lubridate::interval(start = centroid,
end = Start_dt_EST,
tz = "EST"),
Delta_T_duration = dseconds(Delta_T))%>%
distinct(recession_n, .keep_all = TRUE)%>%
select(recession_n, hobo_event_n, site, datetime_interval_EST,
event_dur_sec, centroid, Delta_T, Delta_T_duration)
#Calculating event statistics of recession yields
Event_stats <- merged_rec%>%
group_by(recession_n)%>%
summarise(max_rec_yld = max(rec_yield),
total_rec_yld = sum(rec_yield))%>%
ungroup()
#Calculating the coefficient of variation for all the recession values
cv_all <- inner_join(rec_intervals , rec_model,
by = c("recession_n", "hobo_event_n", "site")) %>%
group_by(hobo_event_n) %>%
mutate(cv_i = sd(i) / mean(i) * 100,
cv_m = sd(m) / mean(m) * 100)%>%
select(recession_n, hobo_event_n, site, cv_i, cv_m)%>%
ungroup()
#Calculating the coefficient of variation for stemflow
cv_SF <- inner_join(rec_intervals , rec_model,
by = c("recession_n", "hobo_event_n", "site"))%>%
filter(!str_detect(site, "TF"))%>%
group_by(hobo_event_n) %>%
mutate(cv_i = sd(i) / mean(i) * 100,
cv_m = sd(m) / mean(m) * 100)%>%
select(recession_n, hobo_event_n, site, cv_i, cv_m)%>%
ungroup()
#Calculating the coefficient of variation for throughfall
cv_TF <- inner_join(rec_intervals , rec_model,
by = c("recession_n", "hobo_event_n", "site"))%>%
filter(str_detect(site, "TF"))%>%
group_by(hobo_event_n) %>%
mutate(cv_i = sd(i) / mean(i) * 100,
cv_m = sd(m) / mean(m) * 100)%>%
select(recession_n, hobo_event_n, site, cv_i, cv_m)%>%
ungroup()
View(centroid)
View(merged_rec)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(scales)
library(patchwork)
library(broom)
#Import ppt events
ppt_events <-readRDS(paste0(here,"/output/ppt_events_with_API.Rds"))%>%
select(Event, datetime_EST2, W9_Precipitation_mm)%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST')))
#Check timezone
tz(ppt_events$datetime_EST2)
#Import recession values
rec_values <- readRDS(paste0(here, "/output/rec_values.Rds"))%>%
rename("rec_yield" = "yield_mm")
#Import recession intervals
rec_intervals <- readRDS(paste0(here, "/output/curve_intervals.Rds"))%>%
select(-notes)%>%
rename("hobo_event_n" = "event_n")%>%
drop_na()
#Import recession models and coefficients
rec_model <- readRDS(paste0(here, "/output/rec_model.Rds"))%>%
select(recession_n, hobo_event_n, site, i, m)
#Merging recession values and intervals
merged_rec <- full_join(rec_values, rec_intervals,
by = c( "recession_n", "hobo_event_n", "site"))
#Storing the cumulative ppt that is just above the midpoint of the total ppt
centroid1<-ppt_events %>%
drop_na %>%
group_by(Event) %>%
arrange(datetime_EST2) %>%
mutate(midpoint = sum(W9_Precipitation_mm)/2) %>%
mutate(cum_ppt = cumsum(W9_Precipitation_mm)) %>%
filter(cum_ppt > midpoint) %>%
mutate(centroid1 = min(cum_ppt)) %>%
filter(cum_ppt == centroid1)
#Storing the cumulative ppt that is just below the midpoint of the total ppt
centroid2<-ppt_events %>%
drop_na%>%
group_by(Event)%>%
mutate(midpoint = sum(W9_Precipitation_mm)/2)%>%
mutate(cum_ppt = cumsum(W9_Precipitation_mm))%>%
filter(cum_ppt < midpoint)%>%
mutate(centroid2 = max(cum_ppt))%>%
filter(cum_ppt == centroid2)
#storing centroid as the median of the cumulative ppt values just below and
#above the midpoint of the total ppt
centroid <- full_join(centroid1, centroid2,
by = c( "Event", "cum_ppt", "datetime_EST2", "midpoint",
"W9_Precipitation_mm"))%>%
group_by(Event)%>%
mutate(centroid = median(datetime_EST2)) %>%
rename("hobo_event_n" = "Event")%>%
ungroup()
#Calculating DeltaT as the time between centroid of ppt and start of recession curves
DeltaT <- inner_join(merged_rec , centroid,
by = c("hobo_event_n")) %>%
mutate(Delta_T = lubridate::interval(start = centroid,
end = Start_dt_EST,
tz = "EST"),
Delta_T_duration = dseconds(Delta_T))%>%
distinct(recession_n, .keep_all = TRUE)%>%
select(recession_n, hobo_event_n, site, datetime_interval_EST,
event_dur_sec, centroid, Delta_T, Delta_T_duration, site2)
#Calculating event statistics of recession yields
Event_stats <- merged_rec%>%
group_by(recession_n)%>%
summarise(max_rec_yld = max(rec_yield),
total_rec_yld = sum(rec_yield))%>%
ungroup()
#Calculating the coefficient of variation for all the recession values
cv_all <- inner_join(rec_intervals , rec_model,
by = c("recession_n", "hobo_event_n", "site")) %>%
group_by(hobo_event_n) %>%
mutate(cv_i = sd(i) / mean(i) * 100,
cv_m = sd(m) / mean(m) * 100)%>%
select(recession_n, hobo_event_n, site, cv_i, cv_m)%>%
ungroup()
#Calculating the coefficient of variation for stemflow
cv_SF <- inner_join(rec_intervals , rec_model,
by = c("recession_n", "hobo_event_n", "site"))%>%
filter(!str_detect(site, "TF"))%>%
group_by(hobo_event_n) %>%
mutate(cv_i = sd(i) / mean(i) * 100,
cv_m = sd(m) / mean(m) * 100)%>%
select(recession_n, hobo_event_n, site, cv_i, cv_m)%>%
ungroup()
#Calculating the coefficient of variation for throughfall
cv_TF <- inner_join(rec_intervals , rec_model,
by = c("recession_n", "hobo_event_n", "site"))%>%
filter(str_detect(site, "TF"))%>%
group_by(hobo_event_n) %>%
mutate(cv_i = sd(i) / mean(i) * 100,
cv_m = sd(m) / mean(m) * 100)%>%
select(recession_n, hobo_event_n, site, cv_i, cv_m)%>%
ungroup()
table2_r8 <- inner_join(cv_all, DeltaT,
by = c("hobo_event_n","recession_n","site"))
#Creating table 2 - centroid, DeltaT duration, slope & interval
table2_r8_2 <- inner_join(table2_r8, rec_model,
by= c("hobo_event_n","recession_n", "site"))
saveRDS(table2_r8_2, paste0(here, "/output/table2.Rds"))
write_csv(table2_r8_2, paste0(here, "/output/table2.csv"))
View(DeltaT)
View(table2_r8_2)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
library(broom)
#Import table containing API values
api_table <- readRDS(paste0(here, "/output/table1.Rds"))%>%
rename("hobo_event_n" = "Event")
#Import recession event statistics
rec_table <- readRDS(paste0(here, "/output/table2.Rds"))
#Import table of hobo events model coefficients
event_table <- readRDS(paste0(here, "/output/event_model.Rds"))
#Merging API and hobo events
merged_event_table <- full_join(api_table, event_table,
by = c( "hobo_event_n"))%>%
select(hobo_event_n, api_30d, event_intensity, m)
#Merging API and rec events
merged_rec_table <- full_join(api_table, rec_table,
by = c( "hobo_event_n"))
View(merged_rec_table)
View(merged_event_table)
#Merging API and rec events
merged_rec_table <- full_join(api_table, rec_table,
by = c( "hobo_event_n"))%>%
select(hobo_event_n, api_30d, event_intensity, m, Delta_T_duration, recession_n, site, site2)
ggplot(merged_event_table) +
geom_point(mapping = aes(x=api_30d, y=m,colour = "api"))
ggplot(merged_event_table) +
geom_point(mapping = aes(event_intensity, y=m,colour = "event_intensity"))
ggplot(merged_rec_table) +
geom_point(mapping = aes(Delta_T_duration, y=m,colour = site2))+
geom_boxplot(mapping = aes(x=Delta_T_duration, y=m))+
facet_wrap(~ site2)
