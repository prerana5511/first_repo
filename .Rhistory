table2_r8 <- inner_join(cv_all, DeltaT,
by = c("hobo_event_n","recession_n","site"))
table2_r8_2 <- inner_join(table2_r8, rec_model,
by= c("hobo_event_n","recession_n", "site"))
write_csv(table2_r8_2, paste0(here, "/output/table2.csv"))
View(table2_r8_2)
View(table2_r8)
View(cv_SF)
View(cv_TF)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
library(broom)
rec_table_1 <- readr::read_csv(paste0(here, "/output/table1.csv"))%>%
rename("hobo_event_n" = "Event")
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
library(broom)
rec_table_1 <- readr::read_csv(paste0(here, "/output/table1.csv"))%>%
rename("hobo_event_n" = "Event")
View(rec_table_1)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(scales)
library(patchwork)
#import precip data
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv")) %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
filter(minute(datetime_EST2) == 0) %>% #remove subhourly timestamps
select(-W9_Streamflow_mm_hr) %>%
arrange(datetime_EST2) #Order from earliest to latest timestamp
#import precip interval and convert timezone to EST
ppt_interval <-readr::read_csv(paste0(here, "/data/hobo_ppt_interval_file.csv"))
tz(ppt_interval$Start_dt_EST)
ppt_interval2 <- ppt_interval%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
write_csv(ppt_interval2, paste0(here, "/output/ppt_interval_final.csv"))
#load API function
source(paste0(here, "/src/API.R"))
#API for 30 days
ppt_api <- ppt %>%
arrange(datetime_EST2) %>%
mutate(api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 30, finite = TRUE))
#Filtering 30d API within ppt events
ppt_api_events <- slice(ppt_api, 0)
for (i in 1:length(ppt_interval2$Event)) {
interval <- ppt_api %>%
filter(datetime_EST2 %within% ppt_interval2$datetime_interval_EST[i]) %>%
mutate(Event = ppt_interval2$Event[i])
ppt_api_events  <- bind_rows(ppt_api_events, interval)
}
#saving precip events
write_csv(ppt_api_events, paste0(here, "/output/ppt_events_with_API.csv"))
#nesting API 30 days events
ppt_api_events2 <- ppt_api_events%>%
group_by(Event)%>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
mutate(data = map(data, ~summarise(.x, across(contains("api"), mean))))%>%
unnest_wider(data) %>%
ungroup
# rename("Event" = "event_n")
#Filtering ppt events
# ppt_events <- slice(ppt, 0)
#
# for (i in 1:length(ppt_interval2$Event)) {
#   interval <- ppt %>%
#     filter(datetime_EST2 %within% ppt_interval2$datetime_interval_EST[i]) %>%
#     mutate(Event = ppt_interval2$Event[i])
#
#
#   ppt_events  <- bind_rows(ppt_events, interval)
# }
event_summary<- inner_join(ppt_api_events, ppt_interval2,
by = c( "Event"))%>%
mutate(event_dur_num = as.numeric(event_dur_sec))%>%
group_by(Event)%>%
mutate(max_ppt = max(W9_Precipitation_mm),
total_ppt = sum(W9_Precipitation_mm),
event_intensity = total_ppt/event_dur_num)%>%
distinct(across(Event), .keep_all = TRUE)%>%
select(datetime_interval_EST, event_dur_sec, event_intensity, total_ppt, Event,max_ppt )
all_events<-inner_join(ppt_api_events2, event_summary,
by = c( "Event"))
View(all_events)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
library(broom)
rec_table_1 <- readr::read_csv(paste0(here, "/output/table1.csv"))%>%
rename("hobo_event_n" = "Event")
rec_table_2 <- readr::read_csv(paste0(here, "/output/table2.csv"))
View(rec_table_2)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(scales)
library(patchwork)
library(broom)
#Import ppt events
ppt_events <-readr::read_csv(paste0(here,  "/output/ppt_events_with_API.csv"))%>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST')))
#Check timezone
tz(ppt_events$datetime_EST2)
#Import recession values
rec_values <- read_csv(paste0(here, "/output/rec_values.csv"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::with_tz(., tzone='EST')))%>%
rename("rec_yield" = "yield_mm")
#Import recession intervals
rec_intervals <- read_csv(paste0(here, "/output/curve_intervals.csv"))%>%
select(-notes)%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST')))%>%
rename("hobo_event_n" = "event_n")%>%
drop_na()
#Import recession models and coefficients
rec_model <- read_csv(paste0(here, "/output/rec_model.csv"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::with_tz(., tzone='EST')))%>%
mutate(site = recession_n)%>%
mutate(site = case_when(str_detect(site, "SFA") ~ "SF-A",
str_detect(site, "SFB") ~ "SF-B",
str_detect(site, "SFC") ~ "SF-C",
str_detect(site, "SFD") ~ "SF-D",
str_detect(site, "TFB") ~ "TF-B",
str_detect(site, "TFD") ~ "TF-D"))%>%
ungroup()%>%
select(recession_n, hobo_event_n, site, i, m)
merged_rec <- full_join(rec_values, rec_intervals,
by = c( "recession_n", "hobo_event_n", "site"))
centroid1<-ppt_events %>%
drop_na %>%
group_by(Event) %>%
arrange(datetime_EST2) %>%
mutate(midpoint = sum(W9_Precipitation_mm)/2) %>%
mutate(cum_ppt = cumsum(W9_Precipitation_mm)) %>%
filter(cum_ppt > midpoint) %>%
mutate(centroid1 = min(cum_ppt)) %>%
filter(cum_ppt == centroid1)
centroid2<-ppt_events %>%
drop_na%>%
group_by(Event)%>%
mutate(midpoint = sum(W9_Precipitation_mm)/2)%>%
mutate(cum_ppt = cumsum(W9_Precipitation_mm))%>%
filter(cum_ppt < midpoint)%>%
mutate(centroid2 = max(cum_ppt))%>%
filter(cum_ppt == centroid2)
centroid <- full_join(centroid1, centroid2,
by = c( "Event", "cum_ppt", "datetime_EST2", "midpoint",
"W9_Precipitation_mm"))%>%
group_by(Event)%>%
mutate(centroid = median(datetime_EST2)) %>%
rename("hobo_event_n" = "Event")%>%
ungroup()
DeltaT <- inner_join(merged_rec , centroid,
by = c("hobo_event_n")) %>%
mutate(Delta_T = lubridate::interval(start = centroid,
end = Start_dt_EST,
tz = "EST"),
Delta_T_duration = dseconds(Delta_T))%>%
distinct(recession_n, .keep_all = TRUE)%>%
select(recession_n, hobo_event_n, site, datetime_interval_EST,
event_dur_sec, centroid, Delta_T, Delta_T_duration)
Event_stats <- merged_rec%>%
group_by(recession_n)%>%
summarise(max_rec_yld = max(rec_yield),
total_rec_yld = sum(rec_yield))%>%
ungroup()
cv_all <- inner_join(rec_intervals , rec_model,
by = c("recession_n", "hobo_event_n", "site")) %>%
group_by(hobo_event_n) %>%
mutate(cv_i = sd(i) / mean(i) * 100,
cv_m = sd(m) / mean(m) * 100)%>%
select(recession_n, hobo_event_n, site, cv_i, cv_m)%>%
ungroup()
cv_SF <- inner_join(rec_intervals , rec_model,
by = c("recession_n", "hobo_event_n", "site"))%>%
filter(!str_detect(site, "TF"))%>%
group_by(hobo_event_n) %>%
mutate(cv_i = sd(i) / mean(i) * 100,
cv_m = sd(m) / mean(m) * 100)%>%
select(recession_n, hobo_event_n, site, cv_i, cv_m)%>%
ungroup()
cv_TF <- inner_join(rec_intervals , rec_model,
by = c("recession_n", "hobo_event_n", "site"))%>%
filter(str_detect(site, "TF"))%>%
group_by(hobo_event_n) %>%
mutate(cv_i = sd(i) / mean(i) * 100,
cv_m = sd(m) / mean(m) * 100)%>%
select(recession_n, hobo_event_n, site, cv_i, cv_m)%>%
ungroup()
table2_r8 <- inner_join(cv_all, DeltaT,
by = c("hobo_event_n","recession_n","site"))
table2_r8_2 <- inner_join(table2_r8, rec_model,
by= c("hobo_event_n","recession_n", "site"))
View(table2_r8_2)
rec_table_2 <- readr::read_csv(paste0(here, "/output/table2.csv"))%>%
mutate(centroid= lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST')))
rec_table_2 <- readr::read_csv(paste0(here, "/output/table2.csv"))%>%
mutate(centroid= lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST')))
rec_table_2 <- readr::read_csv(paste0(here, "/output/table2.csv"))%>%
mutate(centroid = as.POSIXct(centroid, format = "%m/%d/%Y %H:%M"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST')))
View(rec_table_2)
rec_table_2 <- readr::read_csv(paste0(here, "/output/table2.csv"))%>%
mutate(centroid = as.POSIXct(centroid, format = "%m/%d/%Y %H:%M"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::with_tz(., tzone='EST')))
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
library(broom)
rec_table_1 <- readr::read_csv(paste0(here, "/output/table1.csv"))%>%
rename("hobo_event_n" = "Event")
rec_table_2 <- readr::read_csv(paste0(here, "/output/table2.csv"))%>%
mutate(centroid = as.POSIXct(centroid, format = "%m/%d/%Y %H:%M"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::with_tz(., tzone='EST')))
event_table <- readr::read_csv(paste0(here, "/output/event_model.csv"))
View(event_table)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(scales)
library(patchwork)
#HOBO EVENT CURVES
#Import hobo events
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
#Normalize hobo and process events for event summary in r10_fig4 script
event_norm <- hobo_events%>%
group_by(hobo_event_n)%>%
mutate(sec = seconds(dt) - min(seconds(dt)),
sec_norm = sec/max(sec),
yld_mm_norm1 = yield_mm - min(yield_mm),
yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1),
power_yield = 10^yld_mm_norm2)%>%
mutate(site = case_when(site == "SFA_mm" ~ "SF-A",
site == "SFB_mm" ~ "SF-B",
site == "SFC_mm" ~ "SF-C",
site == "SFD_mm" ~ "SF-D",
site == "TFB_mm" ~ "TF-B",
site == "TFD_mm" ~ "TF-D"))%>%
ungroup()%>%
distinct(across(power_yield), .keep_all = TRUE)%>%
drop_na()
#linear models for hobo events
nested_events <- event_norm %>%
drop_na()%>%
select(-site)%>%
group_by(hobo_event_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data) %>%
ungroup()%>%
distinct(across(hobo_event_n), .keep_all = TRUE)
#Save event models for r9 script
write_csv(nested_events,
paste0(here,"/output/event_model.csv"))
View(nested_events)
event_table <- readr::read_csv(paste0(here, "/output/event_model.csv"))%>%
mutate(dt = as.POSIXct(dt, format = "%m/%d/%Y %H:%M"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::with_tz(., tzone='EST')))
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
library(broom)
rec_table_1 <- readr::read_csv(paste0(here, "/output/table1.csv"))%>%
rename("hobo_event_n" = "Event")
rec_table_2 <- readr::read_csv(paste0(here, "/output/table2.csv"))%>%
mutate(centroid = as.POSIXct(centroid, format = "%m/%d/%Y %H:%M"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::with_tz(., tzone='EST')))
#Import table of hobo events model coefficients
event_table <- readr::read_csv(paste0(here, "/output/event_model.csv"))%>%
mutate(dt = as.POSIXct(dt, format = "%m/%d/%Y %H:%M"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::with_tz(., tzone='EST')))
View(rec_table_1)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
library(broom)
api_table <- readr::read_csv(paste0(here, "/output/table1.csv"))%>%
rename("hobo_event_n" = "Event")
rec_table <- readr::read_csv(paste0(here, "/output/table2.csv"))%>%
mutate(centroid = as.POSIXct(centroid, format = "%m/%d/%Y %H:%M"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::with_tz(., tzone='EST')))
#Import table of hobo events model coefficients
event_table <- readr::read_csv(paste0(here, "/output/event_model.csv"))%>%
mutate(dt = as.POSIXct(dt, format = "%m/%d/%Y %H:%M"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::with_tz(., tzone='EST')))
merged_event_table <- full_join(api_table, event_table,
by = c( "hobo_event_n"))%>%
select(hobo_event_n, api_30d, event_intensity, m)
merged_rec_table <- full_join(api_table, rec_table,
by = c( "hobo_event_n"))%>%
mutate(site = recession_n)%>%
mutate(site = case_when(str_detect(site, "SFA") ~ "SM",
str_detect(site, "SFB") ~ "YB",
str_detect(site, "SFC") ~ "SM",
str_detect(site, "SFD") ~ "YB",
str_detect(site, "TFB") ~ "TF",
str_detect(site, "TFD") ~ "TF"))%>%
select(hobo_event_n, api_30d, event_intensity, m, Delta_T_duration, recession_n, site)
p1 = ggplot(merged_event_table) +
geom_point(mapping = aes(x=api_30d, y=m,colour = "api"))
p2 = ggplot(merged_event_table) +
geom_point(mapping = aes(event_intensity, y=m,colour = "event_intensity"))
p3 = ggplot(merged_rec_table) +
geom_point(mapping = aes(Delta_T_duration, y=m,colour = site))+
geom_boxplot(mapping = aes(x=site, y=m))+
facet_wrap(~ site)
p1 /p2
(p1 + p2) / p3
View(api_table)
View(event_table)
View(api_table)
View(rec_table)
View(merged_rec_table)
View(merged_event_table)
View(api_table)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(scales)
library(patchwork)
#import precip data
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv")) %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
filter(minute(datetime_EST2) == 0) %>% #remove subhourly timestamps
select(-W9_Streamflow_mm_hr) %>%
arrange(datetime_EST2) #Order from earliest to latest timestamp
#import precip interval and convert timezone to EST
ppt_interval <-readr::read_csv(paste0(here, "/data/hobo_ppt_interval_file.csv"))
tz(ppt_interval$Start_dt_EST)
ppt_interval2 <- ppt_interval%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
write_csv(ppt_interval2, paste0(here, "/output/ppt_interval_final.csv"))
#load API function
source(paste0(here, "/src/API.R"))
#API for 30 days
ppt_api <- ppt %>%
arrange(datetime_EST2) %>%
mutate(api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 30, finite = TRUE))
#Filtering 30d API within ppt events
ppt_api_events <- slice(ppt_api, 0)
for (i in 1:length(ppt_interval2$Event)) {
interval <- ppt_api %>%
filter(datetime_EST2 %within% ppt_interval2$datetime_interval_EST[i]) %>%
mutate(Event = ppt_interval2$Event[i])
ppt_api_events  <- bind_rows(ppt_api_events, interval)
}
#saving precip events
write_csv(ppt_api_events, paste0(here, "/output/ppt_events_with_API.csv"))
#nesting API 30 days events
ppt_api_events2 <- ppt_api_events%>%
group_by(Event)%>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
mutate(data = map(data, ~summarise(.x, across(contains("api"), mean))))%>%
unnest_wider(data) %>%
ungroup
# rename("Event" = "event_n")
#Filtering ppt events
# ppt_events <- slice(ppt, 0)
#
# for (i in 1:length(ppt_interval2$Event)) {
#   interval <- ppt %>%
#     filter(datetime_EST2 %within% ppt_interval2$datetime_interval_EST[i]) %>%
#     mutate(Event = ppt_interval2$Event[i])
#
#
#   ppt_events  <- bind_rows(ppt_events, interval)
# }
event_summary<- inner_join(ppt_api_events, ppt_interval2,
by = c( "Event"))%>%
mutate(event_dur_num = as.numeric(event_dur_sec))%>%
group_by(Event)%>%
mutate(max_ppt = max(W9_Precipitation_mm),
total_ppt = sum(W9_Precipitation_mm),
event_intensity = total_ppt/event_dur_num)%>%
distinct(across(Event), .keep_all = TRUE)%>%
select(datetime_interval_EST, event_dur_sec, event_intensity, total_ppt, Event,max_ppt )
all_events<-inner_join(ppt_api_events2, event_summary,
by = c( "Event"))
View(all_events)
View(rec_table)
#Import table of hobo events model coefficients
event_table <- readr::read_csv(paste0(here, "/output/event_model.csv"))%>%
mutate(dt = as.POSIXct(dt, format = "%m/%d/%Y %H:%M"))%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::with_tz(., tzone='EST')))
View(event_table)
ggplot(merged_event_table) +
geom_point(mapping = aes(x=api_30d, y=m,colour = "api"))
ggplot(merged_event_table) +
geom_point(mapping = aes(event_intensity, y=m,colour = "event_intensity"))
ggplot(merged_rec_table) +
geom_point(mapping = aes(Delta_T_duration, y=m,colour = site))+
geom_boxplot(mapping = aes(x=site, y=m))+
facet_wrap(~ site)
View(merged_rec_table)
