mutate(ppt2$datetime_EST <- as.POSIXct(ppt2$datetime_EST, format = "%m/%d/%Y %H:%M" ))
Precip_intervals <- bind_rows(Precip_intervals, final)
}
tz(Precip_intervals$datetime_EST)
Precip_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i])
mutate(ppt2$datetime_EST <- as.POSIXct(ppt2$datetime_EST, format = "%m/%d/%Y %H:%M" ))
Precip_intervals <- bind_rows(Precip_intervals, final)
}
tz(Precip_intervals$datetime_EST)
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i])
mutate(datetime_EST <- as.POSIXct(ppt2$datetime_EST, format = "%m/%d/%Y %H:%M" ))
Precip_intervals <- bind_rows(Precip_intervals, final)
}
tz(ppt_intervals$datetime_EST)
?bind_rows
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i])
mutate()
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i])
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
final <- ppt2
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i])
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
rlang::last_error()
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i])
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
vec <- c(0, NA)
vec
ppt2 <- ppt[! ppt$W9_Precipitation_mm %in% vec,]
View(ppt2)
ppt2$datetime_EST <- as.POSIXct(ppt2$datetime_EST, format = "%m/%d/%Y %H:%M" )
ppt2
#adding duration in seconds
ppt2 <- ppt2 %>%
mutate(Time <- hour(ppt2$datetime_EST) + minute(ppt2$datetime_EST)/60 + second(ppt2$datetime_EST)/3600)
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i])
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
length(intervals)
intervals
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
mutate(Rate = W9_Precipitation_mm/Time) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
mutate(Rate = W9_Precipitation_mm/Time)
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
group_by(W9_Precipitation_mm) %>%
mutate(Rate = W9_Precipitation_mm/Time) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt, 0)
ppt_intervals<- as.POSIXct(ppt_intervals, format = "%m/%d/%Y %H:%M" )
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
group_by(W9_Precipitation_mm) %>%
mutate(Rate = W9_Precipitation_mm/Time) %>%
ppt_intervals <- bind_rows(as.POSIXct(ppt_intervals, format = "%m/%d/%Y %H:%M" ), final)
}
tz(ppt_intervals$datetime_EST)
ppt2 <- ppt2 %>%
mutate(Time <- hour(ppt2$datetime_EST) + minute(ppt2$datetime_EST)/60 + second(ppt2$datetime_EST)/3600)
ppt_intervals <- slice(ppt, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
group_by(W9_Precipitation_mm) %>%
mutate(Rate = W9_Precipitation_mm/Time) %>%
ppt_intervals <- bind_rows(as.POSIXct(ppt_intervals, format = "%m/%d/%Y %H:%M" ), final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
group_by(W9_Precipitation_mm) %>%
mutate(Rate = W9_Precipitation_mm/Time) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
View(Precip_intervals)
View(ppt_intervals)
library(dplyr)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals)) {
final <- ppt2 %>%
filter(ppt2$datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter(ppt2$datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter(ppt2$datetime_EST %within% intervals) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals)[i] %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter(datetime_EST %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter(datetime_EST %within% events2$datetime_interval_EST2[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter(ppt$datetime_EST %within% events2$datetime_interval_EST2[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter(ppt2$datetime_EST %within% events2$datetime_interval_EST2[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
#filtering intervals
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter('*tmp* = 1', ppt2$datetime_EST %within% events2$datetime_interval_EST2[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter(*tmp* = 1, ppt2$datetime_EST %within% events2$datetime_interval_EST2[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
#filtering intervals
ppt_intervals <- slice(ppt2, 0)
tmp=1
rm(tmp)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter( ppt2$datetime_EST %within% events2$datetime_interval_EST2[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
ppt_intervals <- slice(ppt2, 0)
tmp=1
rm(tmp)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter(unique(datetime_EST) %within% events2$datetime_interval_EST2[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
interval <- unique(ppt2$datetime_EST)
interval
ppt_intervals <- slice(ppt2, 0)
interval <- unique(ppt2$datetime_EST)
interval
tmp=1
rm(tmp)
i=1
rm(i)
for (i in 1:length(events2$datetime_interval_EST2)) {
final <- ppt2 %>%
filter(interval %within% intervals[i]) %>%
mutate(Event_number = events2$Event_Number[i]) %>%
ppt_intervals <- bind_rows(ppt_intervals, final)
}
tz(ppt_intervals$datetime_EST)
here
#0.0 Setup ----
library(tidyverse) #this is a set of several packages including 'readr'
library(here)
here <- here() #create a filepath object named "here" to use later
library(lubridate) #lubridate needs to be loaded separately
events <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
base::class(events$datetime_interval_EST) #loaded as a character string
lubridate::is.interval(events$datetime_interval_EST)
events2 <- events %>%
mutate(.after = datetime_end_GMT, #indicates where the new column is placed
datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT,
tz = "EST"))
class(events2$datetime_interval_EST2)
tz(events2$datetime_interval_EST2) #timezone of interval gives an error
tz(events2$datetime_start_GMT) #timezone of start is UTC/GMT
view(events2) #check the new intervals match the character intervals
start <- int_start(events2$datetime_interval_EST2[1])
class(start)
tz(start)
intervals <- unique(events2$datetime_interval_EST2)
intervals
sapply(events2, class)
# filter ppt time series based on event intervals
ppt_events <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = lubridate::as_date(datetime_EST, tz = "EST"))
# filter ppt time series based on event intervals
ppt_events <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M", tz = "EST" ))
View(ppt_events)
# filter ppt time series based on event intervals
ppt_events <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M", tz = "EST" )) %>%
select(-W9_Streamflow_mm_hr) %>%
filter(datetime_EST2 %within% intervals)
View(ppt_events)
#adding duration in hours
ppt3 <- ppt %>%
mutate(Time <- hour(ppt2$datetime_EST) + minute(ppt2$datetime_EST)/60 + second(ppt2$datetime_EST)/3600)
ppt_events <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M", tz = "EST" ),
event_n = case_when(datetime_EST2 %within% interval)) %>%
select(-W9_Streamflow_mm_hr) %>%
filter(datetime_EST2 %within% intervals)
View(ppt_events)
ppt_events <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
select(-W9_Streamflow_mm_hr)
View(ppt_events)
#1.2 Assign event numbers/filter ppt time series based on event intervals ----
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
select(-W9_Streamflow_mm_hr)
View(ppt2)
ppt_events <- slice(ppt2, 0)
View(ppt_events)
i=1
rm(i)
for (i in 1:length(intervals)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals[i]) %>%
mutate(event_n = 1:length(intervals))
ppt_events <- bind_rows(ppt_events, interval)
}
intervals
View(events2)
#Now you should have an set of intervals to use for filtering
intervals <- events2 %>%
distinct(datetime_interval_EST2, .keep_all = TRUE)
View(intervals)
#Now you should have an set of intervals to use for filtering
intervals <- events2 %>%
distinct(datetime_interval_EST2, .keep_all = TRUE) %>%
select(Event_Number, datetime_interval_EST2)
#1.2 Assign event numbers/filter ppt time series based on event intervals ----
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
select(-W9_Streamflow_mm_hr)
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number))
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number)
ppt_events <- bind_rows(ppt_events, interval)
}
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
View(ppt_events)
tz(ppt_events$datetime_EST2)
View(ppt_events)
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
View(ppt_events)
View(intervals)
here <- here() #create a filepath object named "here" to use later
#1.0 Load and Clean Data ----
# adding 4 dashes "----" creates a collapsible code chunk
# specify packages using "::" in bewteen package name and function
events <- readr::read_csv(paste0(here, "/data/W9_Throughfall_Stemflow_Precipitation.csv"))
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv"))
#use dplyr::glimpse to browse data
glimpse(events)
glimpse(ppt)
#identifying class
sapply(events, class)
sapply(ppt, class)
#Check the format of the interval column
#"base" refers to the base R packages that come with R
base::class(events$datetime_interval_EST) #loaded as a character string
lubridate::is.interval(events$datetime_interval_EST)
#this column is not classed as an 'interval'
#It must be classed as an interval before lubridate can use it to filter.
##1.1 Define the interval using start and end times----
events2 <- events %>%
mutate(.after = datetime_end_GMT, #indicates where the new column is placed
datetime_interval_EST2 = lubridate::interval(start = datetime_start_GMT,
end = datetime_end_GMT,
tz = "EST"))
class(events2$datetime_interval_EST2)
tz(events2$datetime_interval_EST2) #timezone of interval gives an error
tz(events2$datetime_start_GMT) #timezone of start is UTC/GMT
view(events2) #check the new intervals match the character intervals
#To check the interval is in EST, we can pull out the start
start <- int_start(events2$datetime_interval_EST2[1])
class(start)
tz(start)
#Now you should have an set of intervals to use for filtering
intervals <- events2 %>%
distinct(datetime_interval_EST2, .keep_all = TRUE) %>%
select(Event_Number, datetime_interval_EST2)
##1.2 Assign event numbers/filter ppt time series based on event intervals ----
ppt2 <- ppt %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
select(-W9_Streamflow_mm_hr)
#create an empty dataframe with same headers
ppt_events <- slice(ppt2, 0)
i=1
rm(i)
for (i in 1:length(intervals$Event_Number)) {
interval <- ppt2 %>%
filter(datetime_EST2 %within% intervals$datetime_interval_EST2[i]) %>%
mutate(event_n = intervals$Event_Number[i])
ppt_events <- bind_rows(ppt_events, interval)
}
#Check and correct timezone
tz(ppt_events$datetime_EST2)
attr(ppt_events$datetime_EST2, "tzone") <- "EST"
tz(ppt_events$datetime_EST2)
