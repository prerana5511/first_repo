<<<<<<< HEAD
geom_line(mapping=
aes(x= dt, y= Rates, colour = Observations, group = Observations),
size = 1) +
labs(x =  "\n Datetime", y= "Rate in mm \n", title = " Time vs.  Rate \n") +
theme_bw() + facet_wrap(~ Observations, scales = "free_y", ncol = "2")+#scales optional
theme(legend.position="none")
ggplot(hobo_only_rates) +
geom_line(mapping=
aes(x= dt, y= Rates, colour = Observations, group = Observations),
size = 1) +
labs(x =  "\n Datetime", y= "Rate in mm \n", title = " Time vs.  Rate \n") +
theme_bw() + facet_wrap(~ Observations, scales = "free_y", ncol = "3")+#scales optional
theme(legend.position="none")
ggplot(hobo_only_rates) +
geom_line(mapping=
aes(x= dt, y= Rates, colour = Observations, group = Observations),
size = 1) +
labs(x =  "\n Datetime", y= "Rate in mm \n", title = " Time vs.  Rate \n") +
theme_bw() + facet_wrap(~ Observations, scales = "free_y", ncol = "4")+#scales optional
theme(legend.position="none")
ggplot(hobo_only_rates) +
geom_line(mapping=
aes(x= dt, y= Rates, colour = Observations, group = Observations),
size = 1) +
labs(x =  "\n Datetime", y= "Rate in mm \n", title = " Time vs.  Rate \n") +
theme_bw() + facet_wrap(~ Observations, scales = "free_y", ncol = 3)+#scales optional
theme(legend.position="none")
ggplot(hobo_only_rates) +
geom_line(mapping=
aes(x= dt, y= Rates, colour = Observations, group = Observations),
size = 1) +
labs(x =  "\n Datetime", y= "Rate in mm \n", title = " Time vs.  Rate \n") +
theme_bw() + facet_wrap(~ Observations, scales = "free_y", ncol = 2)+#scales optional
theme(legend.position="none")
knitr::opts_chunk$set(echo = TRUE)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
# library(dplyr)
# library(readr)
# library(tidyr)
# library(purrr)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
library(ggplot2)
library(scales)
#Load import function
source(paste0(here, "/src/hobo_import.R"))
#Load a table of constants to use in calculations below
const <- readRDS(paste0(here,"/data/TF_SF_const.Rds"))
#SF-A-----
site <- "SF-A"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_A_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#SF-B-----
site <- "SF-B"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_B_CA_mm2"]],#water yield normalized to tree canopy area
yield_mm_hobo_zeroed = case_when(yield_mm_hobo < 0 ~ 0.0,
TRUE ~ yield_mm_hobo))
hobo_3 <- hobo_2 %>%
mutate(dt_hr = round_date(dt, unit = "hour")) %>%
group_by(dt_hr) %>%
summarise(yield_mm_hobo_hr = sum(yield_mm_hobo_zeroed)) %>%
ungroup()
#plot
hobo_3_xts <- xts(hobo_3 %>% select(dt_hr, yield_mm_hobo_hr), order.by=hobo_3$dt_hr)
dygraph(hobo_3_xts) %>% #dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#SF-C-----
site <- "SF-C"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_C_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#SF-D-----
site <- "SF-D"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_D_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#TF-B-----
site <- "TF-B"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["TF_L_mm"]], #0.09 L/mm depth in Trash bin
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["TFB_D_Area_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#TF-D-----
site <- "TF-D"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["TF_L_mm"]], #0.09 L/mm depth in Trash bin
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["TFB_D_Area_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
site <- "SF-A"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo2 %>% rename("SFA_mm" = yield_mm_hobo)
site <- "SF-B"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("SFB_mm" = yield_mm_hobo),
by = "dt")
site <- "SF-C"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("SFC_mm" = yield_mm_hobo),
by = "dt")
site <- "SF-D"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("SFD_mm" = yield_mm_hobo),
by = "dt")
site <- "TF-B"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("TFB_mm" = yield_mm_hobo),
by = "dt")
site <- "TF-D"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("TFD_mm" = yield_mm_hobo),
by = "dt")
#interactive plot of throughfall
hobo_all_xts <- xts(hobo_all %>% select(dt, TFB_mm, TFD_mm),
order.by=hobo_all$dt)
dygraph(hobo_all_xts) %>% dyAxis("y", valueRange = c(-1, 100)) %>%
dyRangeSelector() %>% dyOptions(useDataTimezone = TRUE)
#interactive plot of stemflow
hobo_all2_xts <- xts(hobo_all %>% select(dt, SFA_mm, SFB_mm, SFC_mm, SFD_mm),
order.by=hobo_all$dt)
dygraph(hobo_all2_xts) %>% dyAxis("y", valueRange = c(-0.1, 1)) %>%
dyRangeSelector() %>% dyOptions(useDataTimezone = TRUE)
=======
TRUE ~ rate_mm_5min)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#Plot throughfall
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Plot stemflow
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Calculate event statistics
hobo_event_summary <- hobo_events2 %>%
group_by(site, hobo_event_n) %>%
dplyr::summarise(event_yld_mm = max(cumyield_mm, na.rm=T),
max_rate_mm_5min = max(rate_mm_5min, na.rm = T),
mean_rate_mm_5min = mean(rate_mm_5min, na.rm=T),
dt_max_rate_mm_5min = case_when(
rate_mm_5min == max(rate_mm_5min, na.rm = T) ~ dt))
View(hobo_event_summary)
#Import stemflow and throughfall time intervals
>>>>>>> 7eded1c247549bd92672eb0572e4c8b94650b2bc
r2_events <- readxl::read_excel(paste0(here, "/data/hobo/hobo_events.xlsx"))
tz(r2_events$start_time_EST) #imported time zone is UTC
sapply(r2_events, class)
r2_events2 <- r2_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = end_time_EST,
datetime_interval_EST = lubridate::interval(start = start_time_EST,
end = end_time_EST,
tz = "EST"))
class(r2_events2$datetime_interval_EST)
tz(r2_events2$datetime_interval_EST) #timezone of interval gives an error
tz(r2_events2$start_time_EST) #timezone of start is EST
view(r2_events2)
#To check the interval is in EST, we can pull out the start
start <- int_start( r2_events2$datetime_interval_EST[1])
class(start)
tz(start)
#Now we have a set of intervals to use for filtering
intervals <- r2_events2 %>%
distinct(datetime_interval_EST, .keep_all = TRUE) %>%
select(hobo_event_n, datetime_interval_EST) %>%
mutate(event_dur_sec = dseconds(datetime_interval_EST))
View(intervals)
r2_events2 <- r2_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = end_time_EST,
datetime_interval_EST = lubridate::interval(start = start_time_EST,
end = end_time_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
View(r2_events2)
#save
saveRDS(r2_events2, paste0(here, "/output/hobo_intervals.rds"))
rm(r2_events, r2_events2)
#Import stemflow and throughfall time intervals
r2_events <- readxl::read_excel(paste0(here, "/data/hobo/hobo_events.xlsx"))
tz(r2_events$start_time_EST) #imported time zone is UTC
sapply(r2_events, class)
r2_events2 <- r2_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = end_time_EST,
datetime_interval_EST = lubridate::interval(start = start_time_EST,
end = end_time_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
class(r2_events2$datetime_interval_EST)
tz(r2_events2$datetime_interval_EST) #timezone of interval gives an error
tz(r2_events2$start_time_EST) #timezone of start is EST
view(r2_events2)
#To check the interval is in EST, we can pull out the start
start <- int_start( r2_events2$datetime_interval_EST[1])
class(start)
tz(start)
intervals <- r2_events2
#save
saveRDS(intervals, paste0(here, "/output/hobo_intervals.rds"))
rm(r2_events, r2_events2)
hobo_all <- readRDS(paste0(here,"/output/hobo_compiled_wide.Rds"))
#create an empty dataframe with same headers
hobo_events <- slice(hobo_all, 0)
i=1
rm(i)
for (i in 1:length(intervals$hobo_event_n)) {
interval <- hobo_all %>%
filter(dt %within% intervals$datetime_interval_EST[i]) %>%
mutate(hobo_event_n = intervals$hobo_event_n[i])
hobo_events <- bind_rows(hobo_events, interval)
}
<<<<<<< HEAD
#Check and correct timezone
tz(hobo_events$dt2)
attr(hobo_events$dt2, "tzone") <- "EST"
tz(hobo_events$dt2)
#Now the hourly time series record is filtered with event numbers
#SFA
hobo_rate_SFA <- hobo_events %>%
mutate(.after = SFA_mm, #indicates where the new column is placed
Previous_SFA_mm  = lag(hobo_events$SFA_mm),
Change_SFA_mm = (hobo_events$SFA_mm)-Previous_SFA_mm ,
Rate_SFA_mm  = Change_SFA_mm /Previous_SFA_mm ) %>%
select(-Previous_SFA_mm , -Change_SFA_mm)
#hobo_rate <- hobo_rate_SFA %>% full_join(., hobo_events)
#SFB
hobo_rate_SFB <- hobo_rate_SFA %>%
mutate(.after = SFB_mm, #indicates where the new column is placed
Previous_SFB_mm  = lag(hobo_events$SFB_mm),
Change_SFB_mm = (hobo_events$SFB_mm)-Previous_SFB_mm ,
Rate_SFB_mm  = Change_SFB_mm /Previous_SFB_mm ) %>%
select(-Previous_SFB_mm , -Change_SFB_mm)
#hobo_rate <- hobo_rate_SFB %>% full_join(., hobo_rate_SFA)
#SFC
hobo_rate_SFC <- hobo_rate_SFB %>%
mutate(.after = SFC_mm, #indicates where the new column is placed
Previous_SFC_mm  = lag(hobo_events$SFC_mm),
Change_SFC_mm = (hobo_events$SFC_mm)-Previous_SFC_mm ,
Rate_SFC_mm  = Change_SFC_mm /Previous_SFC_mm ) %>%
select(-Previous_SFC_mm , -Change_SFC_mm)
#SFD
hobo_rate_SFD <- hobo_rate_SFC %>%
mutate(.after = SFD_mm, #indicates where the new column is placed
Previous_SFD_mm  = lag(hobo_events$SFD_mm),
Change_SFD_mm = (hobo_events$SFD_mm)-Previous_SFD_mm ,
Rate_SFD_mm  = Change_SFD_mm /Previous_SFD_mm ) %>%
select(-Previous_SFD_mm , -Change_SFD_mm)
#TFB
hobo_rate_TFB <- hobo_rate_SFD %>%
mutate(.after = TFB_mm, #indicates where the new column is placed
Previous_TFB_mm  = lag(hobo_events$TFB_mm),
Change_TFB_mm = (hobo_events$TFB_mm)-Previous_TFB_mm ,
Rate_TFB_mm  = Change_TFB_mm /Previous_TFB_mm ) %>%
select(-Previous_TFB_mm , -Change_TFB_mm)
#TFD
hobo_rate_TFD <- hobo_rate_TFB %>%
mutate(.after = TFD_mm, #indicates where the new column is placed
Previous_TFD_mm  = lag(hobo_events$TFD_mm),
Change_TFD_mm = (hobo_events$TFD_mm)-Previous_TFD_mm ,
Rate_TFD_mm  = Change_TFD_mm /Previous_TFD_mm ) %>%
select(-Previous_TFD_mm , -Change_TFD_mm)
hobo_rate <- hobo_rate_TFD %>%
select(-dt2)
hobo_only_rates <-hobo_rate %>%
select(dt, hobo_event_n, Rate_SFA_mm, Rate_SFB_mm, Rate_SFC_mm, Rate_SFD_mm,
Rate_TFB_mm, Rate_TFD_mm)%>%
mutate(across(starts_with("Rate"), as.character)) %>%
pivot_longer(3:8, names_to = "Observations",
values_to = "Rates") %>%
arrange(hobo_event_n, dt, Observations, Rates) %>%
group_by(hobo_event_n) %>%
drop_na() %>%
ungroup %>%
#  pivot_wider(id_cols =  Observations)%>%
mutate(across(starts_with("Rate"), as.numeric))
#SFA
hobo_rate_SFA <- hobo_events %>%
mutate(.after = SFA_mm, #indicates where the new column is placed
Previous_SFA_mm  = lag(hobo_events$SFA_mm),
Change_SFA_mm = (hobo_events$SFA_mm)-Previous_SFA_mm ,
Rate_SFA_mm  = Change_SFA_mm /Previous_SFA_mm ) %>%
select(-Previous_SFA_mm , -Change_SFA_mm)
#hobo_rate <- hobo_rate_SFA %>% full_join(., hobo_events)
#SFB
hobo_rate_SFB <- hobo_rate_SFA %>%
mutate(.after = SFB_mm, #indicates where the new column is placed
Previous_SFB_mm  = lag(hobo_events$SFB_mm),
Change_SFB_mm = (hobo_events$SFB_mm)-Previous_SFB_mm ,
Rate_SFB_mm  = Change_SFB_mm /Previous_SFB_mm ) %>%
select(-Previous_SFB_mm , -Change_SFB_mm)
#hobo_rate <- hobo_rate_SFB %>% full_join(., hobo_rate_SFA)
#SFC
hobo_rate_SFC <- hobo_rate_SFB %>%
mutate(.after = SFC_mm, #indicates where the new column is placed
Previous_SFC_mm  = lag(hobo_events$SFC_mm),
Change_SFC_mm = (hobo_events$SFC_mm)-Previous_SFC_mm ,
Rate_SFC_mm  = Change_SFC_mm /Previous_SFC_mm ) %>%
select(-Previous_SFC_mm , -Change_SFC_mm)
#SFD
hobo_rate_SFD <- hobo_rate_SFC %>%
mutate(.after = SFD_mm, #indicates where the new column is placed
Previous_SFD_mm  = lag(hobo_events$SFD_mm),
Change_SFD_mm = (hobo_events$SFD_mm)-Previous_SFD_mm ,
Rate_SFD_mm  = Change_SFD_mm /Previous_SFD_mm ) %>%
select(-Previous_SFD_mm , -Change_SFD_mm)
#TFB
hobo_rate_TFB <- hobo_rate_SFD %>%
mutate(.after = TFB_mm, #indicates where the new column is placed
Previous_TFB_mm  = lag(hobo_events$TFB_mm),
Change_TFB_mm = (hobo_events$TFB_mm)-Previous_TFB_mm ,
Rate_TFB_mm  = Change_TFB_mm /Previous_TFB_mm ) %>%
select(-Previous_TFB_mm , -Change_TFB_mm)
#TFD
hobo_rate_TFD <- hobo_rate_TFB %>%
mutate(.after = TFD_mm, #indicates where the new column is placed
Previous_TFD_mm  = lag(hobo_events$TFD_mm),
Change_TFD_mm = (hobo_events$TFD_mm)-Previous_TFD_mm ,
Rate_TFD_mm  = Change_TFD_mm /Previous_TFD_mm ) %>%
select(-Previous_TFD_mm , -Change_TFD_mm)
hobo_rate <- hobo_rate_TFD %>%
select(-dt2)
hobo_only_rates <-hobo_rate %>%
select(dt, hobo_event_n, Rate_SFA_mm, Rate_SFB_mm, Rate_SFC_mm, Rate_SFD_mm,
Rate_TFB_mm, Rate_TFD_mm)%>%
mutate(across(starts_with("Rate"), as.character)) %>%
pivot_longer(3:8, names_to = "Observations",
values_to = "Rates") %>%
arrange(hobo_event_n, dt, Observations, Rates) %>%
group_by(hobo_event_n) %>%
drop_na() %>%
ungroup %>%
#  pivot_wider(id_cols =  Observations)%>%
mutate(across(starts_with("Rate"), as.numeric))
# Create summary statistics for each event
#SFA
SFA_summary <- hobo_rate %>%
group_by(hobo_event_n) %>%
dplyr::summarise(SFA_rate_sum_mm = sum(SFA_mm),
SFA_max_rate_mm_hr = max(Rate_SFA_mm, na.rm = TRUE),
SFA_mean_rate_mm_hr = mean(Rate_SFA_mm), na.rm = TRUE)%>%
left_join(intervals, ., by = "hobo_event_n")
#SFB
SFB_summary <- hobo_rate %>%
group_by(hobo_event_n) %>%
dplyr::summarise(SFB_rate_sum_mm = sum(SFB_mm),
SFB_max_rate_mm_hr = max(Rate_SFB_mm, na.rm = TRUE),
SFB_mean_rate_mm_hr = mean(Rate_SFB_mm), na.rm = TRUE)%>%
left_join(SFA_summary, ., by = "hobo_event_n")
#SFC
SFC_summary <- hobo_rate %>%
group_by(hobo_event_n) %>%
dplyr::summarise(SFC_rate_sum_mm = sum(SFC_mm),
SFC_max_rate_mm_hr = max(Rate_SFC_mm, na.rm = TRUE),
SFC_mean_rate_mm_hr = mean(Rate_SFC_mm), na.rm = TRUE)%>%
left_join(SFB_summary, ., by = "hobo_event_n")
#SFD
SFD_summary <- hobo_rate %>%
group_by(hobo_event_n) %>%
dplyr::summarise(SFD_rate_sum_mm = sum(SFD_mm),
SFD_max_rate_mm_hr = max(Rate_SFD_mm, na.rm = TRUE),
SFD_mean_rate_mm_hr = mean(Rate_SFD_mm), na.rm = TRUE)%>%
left_join(SFC_summary, ., by = "hobo_event_n")
#TFB
TFB_summary <- hobo_rate %>%
group_by(hobo_event_n) %>%
dplyr::summarise(TFB_rate_sum_mm = sum(TFB_mm),
TFB_max_rate_mm_hr = max(Rate_TFB_mm, na.rm = TRUE),
TFB_mean_rate_mm_hr = mean(Rate_TFB_mm), na.rm = TRUE)%>%
left_join(SFD_summary, ., by = "hobo_event_n")
#TFD
TFD_summary <- hobo_rate %>%
group_by(hobo_event_n) %>%
dplyr::summarise(TFD_rate_sum_mm = sum(TFD_mm),
TFD_max_rate_mm_hr = max(Rate_TFD_mm, na.rm = TRUE),
TFD_mean_rate_mm_hr = mean(Rate_TFD_mm), na.rm = TRUE)%>%
left_join(TFB_summary, ., by = "hobo_event_n")
#Summary
hobo_summary <- TFD_summary
ggplot(hobo_only_rates) +
geom_line(mapping=
aes(x= dt, y= Rates, colour = Observations, group = Observations),
size = 1) +
labs(x =  "\n Datetime", y= "Rate in mm \n", title = " Time vs.  Rate \n") +
theme_bw() + facet_wrap(~ Observations, scales = "free_y", ncol = 2)+#scales optional
theme(legend.position="none")
ggplot(hobo_only_rates) +
geom_line(mapping=
aes(x= dt, y= Rates, colour = Observations, group = Observations),
size = 1) +
labs(x =  "\n Datetime", y= "Rate in mm \n", title = " Time vs.  Rate \n") +
theme_bw() + facet_wrap(~ Observations, ncol = 2)+#scales optional
theme(legend.position="none")
ggplot(hobo_only_rates) +
geom_line(mapping=
aes(x= dt, y= Rates, colour = Observations, group = Observations),
size = 1) +
labs(x =  "\n Datetime", y= "Rate in mm \n", title = " Time vs.  Rate \n") +
theme_bw() + facet_wrap(~ Observations, scales = "free_y", ncol = 2)+#scales optional
theme(legend.position="none")
rm(const,events,events_r2,events_summary2, final, hobo, hobo_3,hobo_3_xts, hobo_all)
library(lubridate)
rm(const,events,events_r2,events_summary2, final, hobo, hobo_3,hobo_3_xts, hobo_all)
rm(hobo_all_xts)
rm(hobo_all2_xts,hobo_events,hobo_only_rates,hobo_rate,hobo_rate_SFA)
rm(hobo2,hobo_rate_SFB,hobo_rate_SFC,hobo_rate_SFD,hobo_rate_TFB,hobo_rate_TFD,hobo_rec,hobo_summary,hobo_xts)
rm(interval,interval1,intervals,p1,p2, ppt, ppt_change, ppt_intervals, ppt_new, ppt_rate, ppt1)
rm(Precip_intervals,r2_events,r2_events2, SFA_summary,SFB_summary,SFC_summary,SFD_summary, TFB_summary,TFD_summary, W9_Streamflow_Ppt_file)
rm(plot,SFA_plot)
rm(dateFormat1,datetime,day,here, i, site, start, vec)
rm(hobo_import())
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(here)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(here)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(here)
here()
load("D:/Internship/R/first_repo/.RData")
load("D:/Internship/R/first_repo/src/r2_hobo data import and clean.Rmd")
=======
#Check timezone
tz(hobo_events$dt)
View(hobo_events)
saveRDS(hobo_events, paste0(here, "/output/hobo_events.Rds"))
#load time series of just events
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
View(hobo_events2)
#Plot throughfall
theme_set(theme_bw())
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Plot stemflow
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Calculate event statistics
hobo_event_summary <- hobo_events2 %>%
group_by(site, hobo_event_n) %>%
dplyr::summarise(event_yld_mm = max(cumyield_mm, na.rm=T),
max_rate_mm_5min = max(rate_mm_5min, na.rm = T),
mean_rate_mm_5min = mean(rate_mm_5min, na.rm=T))
View(hobo_event_summary)
ggplot(hobo_event_summary) +
geom_jitter(mapping=aes(x=site, y=mean_rate_mm_5min, color= hobo_event_n))
ggplot(hobo_event_summary) +
geom_jitter(mapping=aes(x=site, y=mean_rate_mm_5min, color= factor(hobo_event_n)))
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping=aes(x=site, y=mean_rate_mm_5min,
color= factor(hobo_event_n)))
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping=aes(x=site, y=event_yld_mm, #mean_rate_mm_5min,
color= factor(hobo_event_n)))
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
View(intervals)
View(interval)
View(intervals)
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_bar(mapping=aes(x=site, y=event_yld_mm, #mean_rate_mm_5min,
color= factor(hobo_event_n)))
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_histogram(mapping=aes(x=site, y=event_yld_mm, #mean_rate_mm_5min,
color= factor(hobo_event_n)))
View(hobo_events2)
hobo_events3 <- inner_join(hobo_events, hobo_events_summary,
by = c("site", "hobo_event_n",
"rate_mm_5min" = "max_rate_mm_5min"))
hobo_events3 <- inner_join(hobo_events, hobo_event_summary,
by = c("site", "hobo_event_n",
"rate_mm_5min" = "max_rate_mm_5min"))
hobo_events3 <- inner_join(hobo_events2, hobo_event_summary,
by = c("site", "hobo_event_n",
"rate_mm_5min" = "max_rate_mm_5min"))
View(hobo_events3)
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Plot stemflow
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
View(hobo_events3)
#Join the max rate with the time series to access the time of max for each event
hobo_events3 <- inner_join(hobo_events2, hobo_event_summary,
by = c("site", "hobo_event_n",
"rate_mm_5min" = "max_rate_mm_5min")) %>%
rownames_to_column()
hobo_events4 <- hobo_events3 %>%
mutate(to_remove = case_when(rowname %in% c(51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE))
View(hobo_events4)
#manually review the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-rownames)
#manually review the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-rowname)
#manually review the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(17, 51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-c(rowname, to_keep))
View(hobo_events4)
#manually review the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(17, 51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-c(rowname, to_keep)) %>%
rename("dt_max_rate" = "dt")
#manually remove the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(17, 51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-c(rowname, to_keep)) %>%
rename("dt_max_rate_mm_5min" = "dt")
View(hobo_events2)
View(hobo_events2)
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
geom_smooth(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
# geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
geom_smooth(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
zoo(., order_by = dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
zoo(., order_by = "dt") %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
zoo(., order.by = dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
# t <- zoo(hobo_events, order.by
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
zoo(., order.by = dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
# t <- zoo(hobo_events, order.by
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
zoo(., order.by = index(dt)) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
# t <- zoo(hobo_events, order.by
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#load time series of just events
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#Plot throughfall
theme_set(theme_bw())
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Plot stemflow
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
# geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
geom_smooth(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Calculate event statistics
hobo_event_summary <- hobo_events2 %>%
group_by(site, hobo_event_n) %>%
dplyr::summarise(event_yld_mm = max(cumyield_mm, na.rm=T),
max_rate_mm_5min = max(rate_mm_5min, na.rm = T),
mean_rate_mm_5min = mean(rate_mm_5min, na.rm=T))
#plot
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_histogram(mapping=aes(x=site, y=event_yld_mm))
#plot
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_boxplot(mapping=aes(x=site, y=event_yld_mm))
#plot
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_boxplot(mapping=aes(x=site, y=event_yld_mm)) +
facet_wrap(~hobo_event_n, scales = "free")
#plot
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_col(mapping=aes(x=site, y=event_yld_mm)) +
facet_wrap(~hobo_event_n, scales = "free")
#plot
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_col(mapping=aes(x=site, y=event_yld_mm, fill = site)) +
facet_wrap(~hobo_event_n, scales = "free")
#Join the max rate with the time series to access the time of max for each event
hobo_events3 <- inner_join(hobo_events2, hobo_event_summary,
by = c("site", "hobo_event_n",
"rate_mm_5min" = "max_rate_mm_5min")) %>%
rownames_to_column()
#manually remove the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(17, 51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-c(rowname, to_keep)) %>%
rename("dt_max_rate_mm_5min" = "dt")
View(hobo_events2)
View(hobo_events4)
View(hobo_events2)
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4, by = c("site", "hobo_event_n"))
View(hobo_events5)
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4, by = c("site", "hobo_event_n")) %>%
group_by(site, n) %>%
mutate(limb = case_when(dt < dt_max_rate_mm_5min ~ "rising",
dt > dt_max_rate_mm_5min ~ "falling",
dt == dt_max_rate_mm_5min ~ "peak"))
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4, by = c("site", "hobo_event_n"))
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4 %>% select(1:3),
by = c("site", "hobo_event_n")) %>%
group_by(site, n) %>%
mutate(limb = case_when(dt < dt_max_rate_mm_5min ~ "rising",
dt > dt_max_rate_mm_5min ~ "falling",
dt == dt_max_rate_mm_5min ~ "peak"))
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4 %>% select(1:3),
by = c("site", "hobo_event_n")) %>%
group_by(site, hobo_event_n) %>%
mutate(limb = case_when(dt < dt_max_rate_mm_5min ~ "rising",
dt > dt_max_rate_mm_5min ~ "falling",
dt == dt_max_rate_mm_5min ~ "peak"))
View(hobo_events5)
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4 %>% select(1:3),
by = c("site", "hobo_event_n")) %>%
group_by(site, hobo_event_n) %>%
mutate(limb = case_when(dt < dt_max_rate_mm_5min ~ "rising",
dt > dt_max_rate_mm_5min ~ "falling",
dt == dt_max_rate_mm_5min ~ "peak")) %>%
select(-dt_max_rate_mm_5min)
ggplot(hobo_events5 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = limb))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events5 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = limb))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events5 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, fill = site, color = limb))+
facet_wrap(~hobo_event_n, scales = "free")
#save
saveRDS(hobo_events5, paste0(here, "/output/hobo_events_cleaned.Rds"))
saveRDS(hobo_events4, paste0(here, "/output/hobo_events_summary.Rds"))
hobo_events_summary <- readRDS("C:/Users/karyan/OneDrive - DOI/2 ANALYSIS/Prerana Bhaumik/Prerana/first_repo/output/hobo_events_summary.Rds")
View(hobo_events_summary)
>>>>>>> 7eded1c247549bd92672eb0572e4c8b94650b2bc
