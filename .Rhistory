TRUE ~ rate_mm_5min)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#Plot throughfall
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Plot stemflow
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Calculate event statistics
hobo_event_summary <- hobo_events2 %>%
group_by(site, hobo_event_n) %>%
dplyr::summarise(event_yld_mm = max(cumyield_mm, na.rm=T),
max_rate_mm_5min = max(rate_mm_5min, na.rm = T),
mean_rate_mm_5min = mean(rate_mm_5min, na.rm=T),
dt_max_rate_mm_5min = case_when(
rate_mm_5min == max(rate_mm_5min, na.rm = T) ~ dt))
View(hobo_event_summary)
#Import stemflow and throughfall time intervals
r2_events <- readxl::read_excel(paste0(here, "/data/hobo/hobo_events.xlsx"))
tz(r2_events$start_time_EST) #imported time zone is UTC
sapply(r2_events, class)
r2_events2 <- r2_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = end_time_EST,
datetime_interval_EST = lubridate::interval(start = start_time_EST,
end = end_time_EST,
tz = "EST"))
class(r2_events2$datetime_interval_EST)
tz(r2_events2$datetime_interval_EST) #timezone of interval gives an error
tz(r2_events2$start_time_EST) #timezone of start is EST
view(r2_events2)
#To check the interval is in EST, we can pull out the start
start <- int_start( r2_events2$datetime_interval_EST[1])
class(start)
tz(start)
#Now we have a set of intervals to use for filtering
intervals <- r2_events2 %>%
distinct(datetime_interval_EST, .keep_all = TRUE) %>%
select(hobo_event_n, datetime_interval_EST) %>%
mutate(event_dur_sec = dseconds(datetime_interval_EST))
View(intervals)
r2_events2 <- r2_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = end_time_EST,
datetime_interval_EST = lubridate::interval(start = start_time_EST,
end = end_time_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
View(r2_events2)
#save
saveRDS(r2_events2, paste0(here, "/output/hobo_intervals.rds"))
rm(r2_events, r2_events2)
#Import stemflow and throughfall time intervals
r2_events <- readxl::read_excel(paste0(here, "/data/hobo/hobo_events.xlsx"))
tz(r2_events$start_time_EST) #imported time zone is UTC
sapply(r2_events, class)
r2_events2 <- r2_events %>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = end_time_EST,
datetime_interval_EST = lubridate::interval(start = start_time_EST,
end = end_time_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
class(r2_events2$datetime_interval_EST)
tz(r2_events2$datetime_interval_EST) #timezone of interval gives an error
tz(r2_events2$start_time_EST) #timezone of start is EST
view(r2_events2)
#To check the interval is in EST, we can pull out the start
start <- int_start( r2_events2$datetime_interval_EST[1])
class(start)
tz(start)
intervals <- r2_events2
#save
saveRDS(intervals, paste0(here, "/output/hobo_intervals.rds"))
rm(r2_events, r2_events2)
hobo_all <- readRDS(paste0(here,"/output/hobo_compiled_wide.Rds"))
#create an empty dataframe with same headers
hobo_events <- slice(hobo_all, 0)
i=1
rm(i)
for (i in 1:length(intervals$hobo_event_n)) {
interval <- hobo_all %>%
filter(dt %within% intervals$datetime_interval_EST[i]) %>%
mutate(hobo_event_n = intervals$hobo_event_n[i])
hobo_events <- bind_rows(hobo_events, interval)
}
#Check timezone
tz(hobo_events$dt)
View(hobo_events)
saveRDS(hobo_events, paste0(here, "/output/hobo_events.Rds"))
#load time series of just events
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
View(hobo_events2)
#Plot throughfall
theme_set(theme_bw())
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Plot stemflow
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Calculate event statistics
hobo_event_summary <- hobo_events2 %>%
group_by(site, hobo_event_n) %>%
dplyr::summarise(event_yld_mm = max(cumyield_mm, na.rm=T),
max_rate_mm_5min = max(rate_mm_5min, na.rm = T),
mean_rate_mm_5min = mean(rate_mm_5min, na.rm=T))
View(hobo_event_summary)
ggplot(hobo_event_summary) +
geom_jitter(mapping=aes(x=site, y=mean_rate_mm_5min, color= hobo_event_n))
ggplot(hobo_event_summary) +
geom_jitter(mapping=aes(x=site, y=mean_rate_mm_5min, color= factor(hobo_event_n)))
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping=aes(x=site, y=mean_rate_mm_5min,
color= factor(hobo_event_n)))
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping=aes(x=site, y=event_yld_mm, #mean_rate_mm_5min,
color= factor(hobo_event_n)))
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
View(intervals)
View(interval)
View(intervals)
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_bar(mapping=aes(x=site, y=event_yld_mm, #mean_rate_mm_5min,
color= factor(hobo_event_n)))
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_histogram(mapping=aes(x=site, y=event_yld_mm, #mean_rate_mm_5min,
color= factor(hobo_event_n)))
View(hobo_events2)
hobo_events3 <- inner_join(hobo_events, hobo_events_summary,
by = c("site", "hobo_event_n",
"rate_mm_5min" = "max_rate_mm_5min"))
hobo_events3 <- inner_join(hobo_events, hobo_event_summary,
by = c("site", "hobo_event_n",
"rate_mm_5min" = "max_rate_mm_5min"))
hobo_events3 <- inner_join(hobo_events2, hobo_event_summary,
by = c("site", "hobo_event_n",
"rate_mm_5min" = "max_rate_mm_5min"))
View(hobo_events3)
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Plot stemflow
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
View(hobo_events3)
#Join the max rate with the time series to access the time of max for each event
hobo_events3 <- inner_join(hobo_events2, hobo_event_summary,
by = c("site", "hobo_event_n",
"rate_mm_5min" = "max_rate_mm_5min")) %>%
rownames_to_column()
hobo_events4 <- hobo_events3 %>%
mutate(to_remove = case_when(rowname %in% c(51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE))
View(hobo_events4)
#manually review the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-rownames)
#manually review the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-rowname)
#manually review the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(17, 51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-c(rowname, to_keep))
View(hobo_events4)
#manually review the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(17, 51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-c(rowname, to_keep)) %>%
rename("dt_max_rate" = "dt")
#manually remove the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(17, 51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-c(rowname, to_keep)) %>%
rename("dt_max_rate_mm_5min" = "dt")
View(hobo_events2)
View(hobo_events2)
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
geom_smooth(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
# geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
geom_smooth(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
zoo(., order_by = dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
zoo(., order_by = "dt") %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
zoo(., order.by = dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
# t <- zoo(hobo_events, order.by
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
zoo(., order.by = dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
# t <- zoo(hobo_events, order.by
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
zoo(., order.by = index(dt)) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min),
rate_mm_5min_smooth = rollmean(rate_mm_5min_clean, 3,
align = "center")) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean,
rate_mm_5min_smooth) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#convert water level yield (mm) to rates for all sites
#pivot data long first
# t <- zoo(hobo_events, order.by
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#load time series of just events
hobo_events <- readRDS(paste0(here, "/output/hobo_events.Rds"))
#convert water level yield (mm) to rates for all sites
#pivot data long first
hobo_events2 <- hobo_events %>%
pivot_longer(cols = contains("_mm"), names_to = "site",
values_to = "yield_mm") %>%
group_by(site, hobo_event_n) %>%
arrange(dt) %>%
mutate(rate_mm_5min = yield_mm - lag(yield_mm, order_by = dt),
rate_mm_5min_clean = case_when(rate_mm_5min < 0 |
is.na(rate_mm_5min) ~ 0,
TRUE ~ rate_mm_5min)) %>%
ungroup() %>%
select(dt, site, hobo_event_n, yield_mm, rate_mm_5min_clean) %>%
rename("cumyield_mm" = "yield_mm",
"rate_mm_5min" = "rate_mm_5min_clean")
#Plot throughfall
theme_set(theme_bw())
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Plot stemflow
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events2 %>% filter(!str_detect(site, "TF"))) +
# geom_line(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
geom_smooth(mapping=aes(x=dt, y= rate_mm_5min, color = site))+
facet_wrap(~hobo_event_n, scales = "free")
#Calculate event statistics
hobo_event_summary <- hobo_events2 %>%
group_by(site, hobo_event_n) %>%
dplyr::summarise(event_yld_mm = max(cumyield_mm, na.rm=T),
max_rate_mm_5min = max(rate_mm_5min, na.rm = T),
mean_rate_mm_5min = mean(rate_mm_5min, na.rm=T))
#plot
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_histogram(mapping=aes(x=site, y=event_yld_mm))
#plot
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_boxplot(mapping=aes(x=site, y=event_yld_mm))
#plot
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_boxplot(mapping=aes(x=site, y=event_yld_mm)) +
facet_wrap(~hobo_event_n, scales = "free")
#plot
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_col(mapping=aes(x=site, y=event_yld_mm)) +
facet_wrap(~hobo_event_n, scales = "free")
#plot
ggplot(hobo_event_summary %>% filter(!str_detect(site, "TF"))) +
geom_col(mapping=aes(x=site, y=event_yld_mm, fill = site)) +
facet_wrap(~hobo_event_n, scales = "free")
#Join the max rate with the time series to access the time of max for each event
hobo_events3 <- inner_join(hobo_events2, hobo_event_summary,
by = c("site", "hobo_event_n",
"rate_mm_5min" = "max_rate_mm_5min")) %>%
rownames_to_column()
#manually remove the duplicates
hobo_events4 <- hobo_events3 %>%
mutate(to_keep = case_when(rowname %in% c(17, 51, 47, 52, 53) ~ FALSE,
TRUE ~ TRUE)) %>%
filter(to_keep) %>% select(-c(rowname, to_keep)) %>%
rename("dt_max_rate_mm_5min" = "dt")
View(hobo_events2)
View(hobo_events4)
View(hobo_events2)
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4, by = c("site", "hobo_event_n"))
View(hobo_events5)
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4, by = c("site", "hobo_event_n")) %>%
group_by(site, n) %>%
mutate(limb = case_when(dt < dt_max_rate_mm_5min ~ "rising",
dt > dt_max_rate_mm_5min ~ "falling",
dt == dt_max_rate_mm_5min ~ "peak"))
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4, by = c("site", "hobo_event_n"))
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4 %>% select(1:3),
by = c("site", "hobo_event_n")) %>%
group_by(site, n) %>%
mutate(limb = case_when(dt < dt_max_rate_mm_5min ~ "rising",
dt > dt_max_rate_mm_5min ~ "falling",
dt == dt_max_rate_mm_5min ~ "peak"))
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4 %>% select(1:3),
by = c("site", "hobo_event_n")) %>%
group_by(site, hobo_event_n) %>%
mutate(limb = case_when(dt < dt_max_rate_mm_5min ~ "rising",
dt > dt_max_rate_mm_5min ~ "falling",
dt == dt_max_rate_mm_5min ~ "peak"))
View(hobo_events5)
hobo_events5 <- hobo_events2 %>%
left_join(., hobo_events4 %>% select(1:3),
by = c("site", "hobo_event_n")) %>%
group_by(site, hobo_event_n) %>%
mutate(limb = case_when(dt < dt_max_rate_mm_5min ~ "rising",
dt > dt_max_rate_mm_5min ~ "falling",
dt == dt_max_rate_mm_5min ~ "peak")) %>%
select(-dt_max_rate_mm_5min)
ggplot(hobo_events5 %>% filter(str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = limb))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events5 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, color = limb))+
facet_wrap(~hobo_event_n, scales = "free")
ggplot(hobo_events5 %>% filter(!str_detect(site, "TF"))) +
geom_line(mapping=aes(x=dt, y= cumyield_mm, fill = site, color = limb))+
facet_wrap(~hobo_event_n, scales = "free")
#save
saveRDS(hobo_events5, paste0(here, "/output/hobo_events_cleaned.Rds"))
saveRDS(hobo_events4, paste0(here, "/output/hobo_events_summary.Rds"))
hobo_events_summary <- readRDS("C:/Users/karyan/OneDrive - DOI/2 ANALYSIS/Prerana Bhaumik/Prerana/first_repo/output/hobo_events_summary.Rds")
View(hobo_events_summary)
