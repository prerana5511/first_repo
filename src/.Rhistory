yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1),
power_yield = 10^yld_mm_norm2)
hobo_events_new2[c('power_yield')][sapply(hobo_events_new2[c('power_yield')], is.infinite)] <- NA
nested_hobo_events <- hobo_events_new2 %>%
drop_na()%>%
group_by(recession_n) %>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x))) %>%
mutate(mod = map(data, ~lm(power_yield ~ sec_norm, data= .)),
r = map_dbl(.x = data, .f = ~cor(y=(.x$power_yield), x = .x$sec_norm,
use = "na.or.complete")),
m = map_dbl(data, ~lm(power_yield~ sec_norm, data = .)$coefficients[[2]]),
i = map_dbl(data, ~lm(power_yield ~ sec_norm, data = .)$coefficients[[1]]),
r2 = r^2) %>%
unnest(data) %>%
ungroup() %>%
# mutate(cv = sd(m) / mean(m) * 100) %>% #cv is same for all
distinct(across(recession_n), .keep_all = TRUE)
ggplot(nested_hobo_events) +
geom_jitter(mapping = aes(x=as.factor(hobo_event_n), y= m, colour = site))
all_events<-inner_join(ppt_daily_api_events, nested_hobo_events,
by = c( "recession_n")) %>%
group_by(recession_n, dt_interval)%>%
mutate(event_dur_num = as.numeric(dt_interval),
units="secs") %>% ##24hrs event
mutate(event_intensity = W9_Precipitation_mm/event_dur_num) %>%
ungroup() %>%
group_by(event_n) %>%
mutate(cv = sd(m) / mean(m) * 100) %>%
ungroup()
sapply(all_events, class)
t1 <-ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
t2 <-ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_10d, colour = site))
t3<-ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_30d, colour = site))
t4<-ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_inf, colour = site))
ggsave(filename = "TF_cv_api_1d.png", plot = t1, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "TF_cv_api_10d.png", plot = t2, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "TF_cv_api_30d.png", plot = t3, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "TF_cv_api_inf.png", plot = t4, path = paste0(here, "/output/figs/"),
device = "png")
s1 <-ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_1d, colour = site))
s2 <-ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_10d, colour = site))
s3 <-ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_30d, colour = site))
s4 <-ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= api_inf, colour = site))
ggsave(filename = "SF_cv_api_1d.png", plot = s1, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "SF_cv_api_10d.png", plot = s2, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "SF_cv_api_30d.png", plot = s3, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "SF_cv_api_inf.png", plot = s4, path = paste0(here, "/output/figs/"),
device = "png")
a1 <- ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
a1
a2 <- ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=cv , y= event_intensity, colour = site))
a2
ggsave(filename = "cv_ei_TF.png", plot = a1, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "cv_ei_SF.png", plot = a2, path = paste0(here, "/output/figs/"),
device = "png")
p1 <- ggplot(all_events %>% filter(str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=event_intensity, y= m, colour = site),
size = 5) +
theme_bw()
p1
p2 <- ggplot(all_events %>% filter(!str_detect(site, "TF"))) +
geom_jitter(mapping = aes(x=event_intensity, y= m, colour = site),
size = 5) +
theme_bw()
p2
ggsave(filename = "ei_m_TF.png", plot = p1, path = paste0(here, "/output/figs/"),
device = "png")
ggsave(filename = "ei_m_SF.png", plot = p2, path = paste0(here, "/output/figs/"),
device = "png")
# hobo_events_new3 <-hobo_events_new%>%
#   rename("Event"="hobo_event_n",)%>%
#   mutate(yld_mm_norm1 = yield_mm - min(yield_mm),
#          yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1))%>%
#   distinct(yld_mm_norm2, .keep_all = TRUE)
#
# all_events2<- inner_join(ppt_events_r5, hobo_events_new3,
#                          by = c( "Event"))%>%
#   select(Event,datetime_EST2,W9_Precipitation_mm, dt, site, yield_mm, recession_n)%>%
#   mutate(yld_mm_norm1 = yield_mm - min(yield_mm),
#          yld_mm_norm2 = yld_mm_norm1/max(yld_mm_norm1))%>%
#   distinct(yld_mm_norm2, .keep_all = TRUE)
hobo_events_new3 <-hobo_events_new%>%
group_by(recession_n)%>%
rename("Recession_yield"="yield_mm","Event"="hobo_event_n", "rec_dt" = "dt")%>%
mutate(Rec_yld_norm = Recession_yield + abs(min(Recession_yield)))%>%
distinct(Rec_yld_norm, .keep_all = TRUE)%>%
ungroup()
hobo_events3 <- hobo_events2%>%
rename("Event_yield"="yield_mm","Event"="hobo_event_n", "Event_dt"="dt")%>%
mutate(Ev_yld_norm = Event_yield + abs(min(Event_yield)))%>%
distinct(Ev_yld_norm, .keep_all = TRUE)
event8_SF_rec <- hobo_events_new3%>%
filter(!str_detect(site, "TF"))%>%
filter(Event== 1)%>%
select(Rec_yld_norm,site, rec_dt, Event, Recession_yield)%>%
pivot_wider(names_from = "site", values_from = "Rec_yld_norm")%>%
pivot_longer(cols = c("SF-A","SF-C") , names_to = "Sugar_Maple",
values_to = "SM_yield")%>%
pivot_longer(cols = c("SF-B") , names_to = "Yellow_Birch",
values_to = "YB_yield")%>%
pivot_longer(cols = c("SM_yield","YB_yield") , names_to = "stemflow",
values_to = "SF_yield")%>%
distinct(SF_yield, .keep_all = TRUE)
event8_SF_ppt <- inner_join(ppt_events_r5, event8_SF_event,
by = c(  "Event"))
View(ppt_events_r5)
event8_SF_ppt <- inner_join(ppt_events_r5, event8_SF_event,
by = c(  "Event"))%>%
filter(datetime_EST2 == Event_dt)
event8_SF_rec <- hobo_events_new3%>%
filter(!str_detect(site, "TF"))%>%
filter(Event== 1)%>%
select(Rec_yld_norm,site, rec_dt, Event, Recession_yield)%>%
pivot_wider(names_from = "site", values_from = "Rec_yld_norm")%>%
pivot_longer(cols = c("SF-A","SF-C") , names_to = "Sugar_Maple",
values_to = "SM_yield")%>%
pivot_longer(cols = c("SF-B") , names_to = "Yellow_Birch",
values_to = "YB_yield")%>%
pivot_longer(cols = c("SM_yield","YB_yield") , names_to = "stemflow",
values_to = "SF_yield")%>%
distinct(SF_yield, .keep_all = TRUE)
event8_SF_event <- hobo_events3%>%
filter(!str_detect(site, "TF"))%>%
filter(Event== 1)%>%
select(Ev_yld_norm,site, Event_dt, Event, Event_yield)%>%
pivot_wider(names_from = "site", values_from = "Ev_yld_norm")%>%
pivot_longer(cols = c("SF-A","SF-C") , names_to = "Sugar_Maple",
values_to = "SM_yield")%>%
pivot_longer(cols = c("SF-B") , names_to = "Yellow_Birch",
values_to = "YB_yield")%>%
pivot_longer(cols = c("SM_yield","YB_yield") , names_to = "stemflow",
values_to = "SF_yield")%>%
distinct(SF_yield, .keep_all = TRUE)
event8_SF_ppt <- inner_join(ppt_events_r5, event8_SF_event,
by = c(  "Event"))%>%
filter(datetime_EST2 == Event_dt)
View(event8_SF_ppt)
event8_SF_ppt <- inner_join(ppt_events_r5, event8_SF_event,
by = c(  "Event"))%>%
select(datetime_EST2, W9_Precipitation_mm, Event_dt, Event_yield, stemflow, SF_yield)
event8_SF_ppt <- inner_join(ppt_events_r5, event8_SF_event,
by = c(  "Event"))%>%
select(datetime_EST2, W9_Precipitation_mm, Event_dt, Event_yield, stemflow, SF_yield, Event)
event8_SF <-inner_join(event8_SF_rec , event8_SF_event,
by = c(  "Event"))
View(event8_SF)
event8_SF <-inner_join(event8_SF_rec , event8_SF_ppt,
by = c(  "Event"))
source("D:/Internship/R/GitHub/New folder/src/r5_new_events.R")
ggplot(event8_SF%>%filter(Event == 1), mapping = aes(x= datetime_EST2, y= W9_Precipitation_mm))+
# geom_point()
geom_bar(stat='identity')
ggplot()+
geom_point(aes(x= datetime_EST2, y = Event_yield, group = stemflow),
data = event8_SF, colour = alpha( 'black', 0.4))
ggplot()+
geom_point(aes(x= datetime_EST2, y = Event_yield, group = stemflow.y),
data = event8_SF, colour = alpha( 'black', 0.4))
ggplot()+
geom_point(aes(x= datetime_EST2, y = Event_yield, group = stemflow.y),
data = event8_SF, colour = alpha( 'black', 0.4)) +
geom_point(aes(x= datetime_EST2, y = Recession_yield, group = stemflow.x, colour = stemflow.x),
data = event8_SF)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
# library(ggplot2)
library(scales)
library(patchwork)
ppt <- readr::read_csv(paste0(here, "/data/W9_Streamflow_Precipitation.csv")) %>%
mutate(.after = datetime_EST, #indicates where the new column is placed
datetime_EST2 = as.POSIXct(datetime_EST, format = "%m/%d/%Y %H:%M")) %>%
filter(minute(datetime_EST2) == 0) %>% #remove subhourly timestamps
select(-W9_Streamflow_mm_hr) %>%
arrange(datetime_EST2) #Order from earliest to latest timestamp
ppt_interval <-readr::read_csv(paste0(here, "/data/ppt_interval_fomatted.csv"))
tz(ppt_interval$Start_dt_EST)
ppt_interval2 <- ppt_interval%>%
mutate(across(.cols = lubridate::is.POSIXct,
~ lubridate::force_tz(., tzone='EST'))) %>%
mutate(.after = End_dt_EST,
datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
end = End_dt_EST,
tz = "EST"),
event_dur_sec = dseconds(datetime_interval_EST))
#load API function
source(paste0(here, "/src/API.R"))
# #Daily API
# ppt_daily <- ppt %>%
#   mutate(date = as.Date(datetime_EST2)) %>%
#   group_by(date)%>%
#   nest() %>%
#   mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
#   mutate(data = map(data, ~summarise(.x, across(where(is.numeric), sum))))%>%
#   unnest_wider(data) %>%
#   ungroup()%>%
#   mutate(date = as.POSIXct(date))
#
# sapply(ppt_daily, class)
ppt_api <- ppt %>%
arrange(datetime_EST2) %>%
mutate(api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 30, finite = TRUE))
# ppt_daily_api <- ppt_daily %>%
#   arrange(date) %>%
#   mutate(api_30d = getApi(W9_Precipitation_mm, k = 0.9, n = 30, finite = TRUE),
#          dt_start = force_tz(as_datetime(date), "EST"),
#          dt_end = force_tz(as_datetime(date) + hours(23) + minutes(59) + seconds(59),
#                            "EST"),
#          dt_interval = interval(dt_start, dt_end))
# curve_intervals <- read_csv(paste0(here, "/data/hobo_new_utf.csv"))
# tz(curve_intervals$Start_dt_EST)
# curve_intervals2 <- curve_intervals %>%
#   mutate(across(.cols = lubridate::is.POSIXct,
#                 ~ lubridate::force_tz(., tzone='EST'))) %>%
#   mutate(.after = End_dt_EST,
#          datetime_interval_EST = lubridate::interval(start = Start_dt_EST,
#                                                      end = End_dt_EST,
#                                                      tz = "EST"),
#          event_dur_sec = dseconds(datetime_interval_EST))
#Filtering daily API events
ppt_api_events <- slice(ppt_api, 0)
for (i in 1:length(ppt_interval2$Event)) {
interval <- ppt_api %>%
filter(datetime_EST2 %within% ppt_interval2$datetime_interval_EST[i]) %>%
mutate(event_n = ppt_interval2$Event[i])
ppt_api_events  <- bind_rows(ppt_api_events, interval)
}
ppt_api_events2 <- ppt_api_events%>%
group_by(event_n)%>%
nest() %>%
mutate(nobs = map_dbl(.x = data, .f = ~nrow(.x)))%>%
mutate(data = map(data, ~summarise(.x, across(contains("api"), mean))))%>%
unnest_wider(data) %>%
ungroup()%>%
rename("Event" = "event_n")
#
# #There are multiple SF/TF collector events per one ppt record, so there are only 58 periods in the daily ppt record that correspond to the 89 SF/TF event periods
#
# ppt_api_events2 <- ppt_daily_api_events %>%
#   distinct(event_n, .keep_all = TRUE)%>%
#   rename("Event" = "event_n")
#   # select(c(event_n, contains("api")))
#Filtering daily API events
ppt_events <- slice(ppt, 0)
for (i in 1:length(ppt_interval2$Event)) {
interval <- ppt %>%
filter(datetime_EST2 %within% ppt_interval2$datetime_interval_EST[i]) %>%
mutate(Event = ppt_interval2$Event[i])
ppt_events  <- bind_rows(ppt_events, interval)
}
event_summary<- inner_join(ppt_events, ppt_interval2,
by = c( "Event"))%>%
mutate(event_dur_num = as.numeric(event_dur_sec))%>%
group_by(Event)%>%
mutate(max_ppt = max(W9_Precipitation_mm),
total_ppt = sum(W9_Precipitation_mm),
event_intensity = total_ppt/event_dur_num)%>%
distinct(across(Event), .keep_all = TRUE)%>%
select(datetime_interval_EST, event_dur_sec, event_intensity, total_ppt, Event,max_ppt )
all_events<-inner_join(ppt_api_events2, event_summary,
by = c( "Event"))
View(all_events)
knitr::opts_chunk$set(echo = TRUE)
library(here)
here <- here()
here
library(tidyverse)
library(lubridate)
# library(dplyr)
# library(readr)
# library(tidyr)
# library(purrr)
library(fs)
library(xts)
library(dygraphs)
library(readxl)
#library(ggplot2)
library(scales)
#Load import function
source(paste0(here, "/src/hobo_import.R"))
#Load a table of constants to use in calculations below
const <- readRDS(paste0(here,"/data/TF_SF_const.Rds"))
#SF-A-----
site <- "SF-A"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_A_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#SF-B-----
site <- "SF-B"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_B_CA_mm2"]],#water yield normalized to tree canopy area
yield_mm_hobo_zeroed = case_when(yield_mm_hobo < 0 ~ 0.0,
TRUE ~ yield_mm_hobo))
hobo_3 <- hobo_2 %>%
mutate(dt_hr = round_date(dt, unit = "hour")) %>%
group_by(dt_hr) %>%
summarise(yield_mm_hobo_hr = sum(yield_mm_hobo_zeroed)) %>%
ungroup()
#plot
hobo_3_xts <- xts(hobo_3 %>% select(dt_hr, yield_mm_hobo_hr), order.by=hobo_3$dt_hr)
dygraph(hobo_3_xts) %>% #dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#SF-C-----
site <- "SF-C"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_C_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#SF-D-----
site <- "SF-D"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["SF_L_mm"]], #0.05 L/mm depth in bucket
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["SF_D_CA_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#TF-B-----
site <- "TF-B"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["TF_L_mm"]], #0.09 L/mm depth in Trash bin
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["TFB_D_Area_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
#TF-D-----
site <- "TF-D"
#get file paths
paths <- dir_ls(paste0(here, "/data/hobo/pressure_corrected/",
site, "/"))
#row bind results of import function
hobo <- map_dfr(paths, hobo_import)
#Calculate yields
hobo_2 <- hobo %>%
mutate(vol_L = depth_m*1000 * const$val[["TF_L_mm"]], #0.09 L/mm depth in Trash bin
vol_mm3 = vol_L * 1E+6, #1000000mm^3/L
yield_mm_hobo = vol_mm3/const$val[["TFB_D_Area_mm2"]])  #water yield normalized to tree canopy area
#plot
plot(hobo_2$yield_mm_hobo ~ hobo_2$dt)
dir_create(paste0(here, "/output/hobo_imported/", site))
#save imported hobo record
saveRDS(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
write_csv(hobo_2, paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.csv"))
rm(hobo, hobo_2, site, paths)
site <- "SF-A"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo2 %>% rename("SFA_mm" = yield_mm_hobo)
site <- "SF-B"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("SFB_mm" = yield_mm_hobo),
by = "dt")
site <- "SF-C"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("SFC_mm" = yield_mm_hobo),
by = "dt")
site <- "SF-D"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("SFD_mm" = yield_mm_hobo),
by = "dt")
site <- "TF-B"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("TFB_mm" = yield_mm_hobo),
by = "dt")
site <- "TF-D"
hobo <- readRDS(paste0(here, "/output/hobo_imported/",
site, "/", site, "_imported.Rds"))
hobo2 <- hobo %>% select(dt, yield_mm_hobo)
hobo_xts <- xts(hobo2, order.by=hobo$dt)
dygraph(hobo_xts) %>% dyAxis("y", valueRange = c(-1, 1)) %>%
dyRangeSelector()
hobo_all <- hobo_all %>% full_join(., hobo2 %>%
rename("TFD_mm" = yield_mm_hobo),
by = "dt")
#interactive plot of throughfall
hobo_all_xts <- xts(hobo_all %>% select(dt, TFB_mm, TFD_mm),
order.by=hobo_all$dt)
dygraph(hobo_all_xts) %>% dyAxis("y", valueRange = c(-1, 100)) %>%
dyRangeSelector() %>% dyOptions(useDataTimezone = TRUE)
#interactive plot of stemflow
hobo_all2_xts <- xts(hobo_all %>% select(dt, SFA_mm, SFB_mm, SFC_mm, SFD_mm),
order.by=hobo_all$dt)
dygraph(hobo_all2_xts) %>% dyAxis("y", valueRange = c(-0.1, 1)) %>%
dyRangeSelector() %>% dyOptions(useDataTimezone = TRUE)
saveRDS(hobo_all, paste0(here,"/output/hobo_compiled_wide.Rds"))
View(hobo_all)
